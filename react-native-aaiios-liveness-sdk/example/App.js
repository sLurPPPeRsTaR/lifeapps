/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, { Component } from 'react';
import {StyleSheet, Text, View, Button, NativeModules} from 'react-native';
import AAIIOSLivenessView from 'react-native-aaiios-liveness-sdk';

export default class App extends Component<{}> {
  state = {
    message: '--',
    version: '',
    rootPage: true,
    sdkInitSuccess: false
  };

  constructor(props) {
    super(props);
    
    // Init SDK
    /*
    Market available value are as follows:

    AAILivenessMarketIndonesia
    AAILivenessMarketIndia
    AAILivenessMarketPhilippines
    AAILivenessMarketVietnam
    AAILivenessMarketThailand
    AAILivenessMarketMexico
    AAILivenessMarketMalaysia
    AAILivenessMarketPakistan
    AAILivenessMarketNigeria
    AAILivenessMarketColombia
    AAILivenessMarketSingapore
    */

    // There are several ways to initialize the SDK
    /*
    // Option 1(NOT RECOMMENDED): Using accessKey and secretKey:
    // NativeModules.RNAAILivenessSDK.init("your-access-key", "your-secret-key", "your-market")
    */

    /*
    // Option 2 (recommended, but only for customers with global services enabled): Using license
    // 
    // NativeModules.RNAAILivenessSDK.initWithMarketAndGlobalService("your-market", isGlobalService ? true: false)
    */

    /*
    // Option 3 (recommended, for most customers): Using license
    NativeModules.RNAAILivenessSDK.initWithMarket("your-market")
    */
    // e.g.
    NativeModules.RNAAILivenessSDK.initWithMarket("AAILivenessMarketIndonesia")
    
    /*
    // Set whether to detect face occlusion. The default value is NO.
    // Note face occlusion detection only in the preparation phase,
    // not in the action detection phase
    NativeModules.RNAAILivenessSDK.configDetectOcclusion(true)
    */

    /*
    // Set the size(width) of `img` when method `onDetectionComplete` is called.
    // Image size(width) should be in range [300, 1000], default image size(width) is 600(600x600).
    NativeModules.RNAAILivenessSDK.configResultPictureSize(600)
     */

    /*
    // User binding (strongly recommended).
    // You can use this method to pass your user unique identifier to us, 
    // we will establish a mapping relationship based on the identifierã€‚
    // It is helpful for us to check the log when encountering problems.
    NativeModules.RNAAILivenessSDK.configUserId("your user id")
     */
  }

  componentDidMount() {
    // Get SDK version
    NativeModules.RNAAILivenessSDK.sdkVersion((message) => {
      this.setState({
        version: message,
      });
    });

    // Configure your license, the license content is obtained by your server calling our openapi.
    let licenseStr = "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"
    NativeModules.RNAAILivenessSDK.configLicenseAndCheck(licenseStr, (result) => {
      this.setState({
        message: "init result:" + result,
        sdkInitSuccess: (result === "SUCCESS")
      });
    })
  }

  render() {
    if (this.state.rootPage || !this.state.sdkInitSuccess) {
      return <View style={styles.container}>
              <Text style={styles.instructions}>STATUS: {this.state.message}</Text>
              <Text style={styles.instructions}>SDK Version: {this.state.version}</Text>
              <Button
                onPress={()=> {
                  this.setState({
                    rootPage: false
                  })
                }}
                title="show liveness view"
                color="#841584"
              />
      </View>
    } else {
      return <AAIIOSLivenessView 
              showHUD={true}
              style={styles.sdkContent}
              /*
              language={"en"}
              */
              
              /*
              prepareTimeoutInterval={10}
              */
              onCameraPermissionDenied={(errorKey, errorMessage) => {
                console.log(">>>>> onCameraPermissionDenied", errorKey, errorMessage)
                this.setState({
                  rootPage: true,
                  message: errorMessage
                })
              }}
              livenessViewBeginRequest={() => {console.log(">>>>> livenessViewBeginRequest")}}
              livenessViewEndRequest={() => {console.log(">>>>> livenessViewEndRequest")}}
              onDetectionComplete={(livenessId, img) => {
                console.log(">>>>> onDetectionComplete:", livenessId)
                this.setState({
                  rootPage: true,
                  message: livenessId
                })
              }}
              onDetectionFailed={(errorCode, errorMessage) => {
                console.log(">>>>> onDetectionFailed:", errorCode, errorMessage)
                this.setState({
                  rootPage: true,
                  message: errorMessage
                })
              }}
              onLivenessViewRequestFailed={(errorCode, errorMessage, transactionId) => {
                console.log(">>>>> onLivenessViewRequestFailed:", errorCode, errorMessage, transactionId)
                this.setState({
                  rootPage: true,
                  message: errorMessage
                })
              }}
            >
          </AAIIOSLivenessView>
    }
  }
}


const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
  sdkContent: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
  }
});
