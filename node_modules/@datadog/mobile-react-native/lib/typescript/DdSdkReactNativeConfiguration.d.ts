import type { ProxyConfiguration } from './ProxyConfiguration';
import type { SdkVerbosity } from './SdkVerbosity';
import { TrackingConsent } from './TrackingConsent';
import type { LogEventMapper } from './logs/types';
import type { ActionEventMapper } from './rum/eventMappers/actionEventMapper';
import type { ErrorEventMapper } from './rum/eventMappers/errorEventMapper';
import type { ResourceEventMapper } from './rum/eventMappers/resourceEventMapper';
import type { FirstPartyHost } from './rum/types';
export declare enum VitalsUpdateFrequency {
    FREQUENT = "FREQUENT",
    AVERAGE = "AVERAGE",
    RARE = "RARE",
    NEVER = "NEVER"
}
export declare type FirstPartyHostsConfiguration = (FirstPartyHost | LegacyFirstPartyHost)[];
export declare type LegacyFirstPartyHost = string;
/**
 * Defaults legacy first party hosts format to Datadog first party hosts to keep
 * retro-compatibility before OTel support was introduced.
 */
export declare const formatFirstPartyHosts: (firstPartyHosts: FirstPartyHostsConfiguration) => FirstPartyHost[];
/**
 * The SDK configuration class.
 * It will be used to configure the SDK functionality at initialization.
 */
export declare class DdSdkReactNativeConfiguration {
    readonly clientToken: string;
    readonly env: string;
    readonly applicationId: string;
    readonly trackInteractions: boolean;
    readonly trackResources: boolean;
    readonly trackErrors: boolean;
    readonly trackingConsent: TrackingConsent;
    /**
     * Enables crash reporting for native plaforms (iOS, Android). Default `false`.
     */
    nativeCrashReportEnabled: boolean;
    /**
     * @deprecated `sampleRate` has been replaced by `sessionSamplingRate` to avoid confusion with `resourceTracingSamplingRate` and will be removed in a future release.
     */
    sampleRate?: number;
    /**
     * Percentage of sampled RUM sessions. Range `0`-`100`.
     */
    sessionSamplingRate: number;
    /**
     * Percentage of tracing integrations for network calls between your app and your backend. Range `0`-`100`.
     */
    resourceTracingSamplingRate: number;
    site: string;
    /**
     * Verbosity for internal SDK logging.
     * Set to `SdkVerbosity.DEBUG` to debug your SDK implementation.
     */
    verbosity: SdkVerbosity | undefined;
    /**
     * Enables native views tracking.
     * Set to `true` if you use a custom navigation system relying on native views.
     */
    nativeViewTracking: boolean;
    /**
     * Enables native interaction tracking.
     * Set to `true` if you want to track interactions on native screens.
     */
    nativeInteractionTracking: boolean;
    proxyConfig?: ProxyConfiguration;
    serviceName?: string;
    /**
     * List of your backends hosts to enable tracing with.
     * Regular expressions are NOT supported.
     *
     * Matches domains and subdomains, e.g. `['example.com']` matches `example.com` and `api.example.com`.
     */
    firstPartyHosts: FirstPartyHostsConfiguration;
    /**
     * Overrides the reported version of the app.
     * Accepted characters are alphanumerics and `_`, `-`, `:`, `.`, `/`.
     * Other special characters are converted to underscores.
     *
     * See https://docs.datadoghq.com/getting_started/tagging/#define-tags for more information on the format.
     *
     * Make sure you set it correctly, as it will have to match the one specified during the upload of your source maps and other mapping files.
     */
    version?: string;
    /**
     * Add a suffix to the reported version of the app.
     * Accepted characters are alphanumerics and `_`, `-`, `:`, `.`, `/`.
     * Other special characters are converted to underscores.
     *
     * See https://docs.datadoghq.com/getting_started/tagging/#define-tags for more information on the format.
     *
     * A dash (`-`) will be automatically added between the version and the suffix
     */
    versionSuffix?: string;
    /**
     * The sampling rate for Internal Telemetry (info related to the work of the
     * SDK internals).
     *
     * The sampling rate must be a value between 0 and 100. A value of 0 means no
     * telemetry will be sent, 100 means all telemetry will be sent. When
     * `telemetrySampleRate` is not set, the default value from the iOS and
     * Android SDK is used, which is 20.
     */
    telemetrySampleRate: number;
    /**
     * The threshold for native long tasks reporting in milliseconds.
     *
     * - Setting it to `0` or `false` disables native long task reporting.
     * - Values below `100` will be raised to `100`.
     * - Values above `5000` will be lowered to `5000`.
     *
     * Default value is `200`.
     */
    nativeLongTaskThresholdMs: number | false;
    /**
     * The threshold for javascript long tasks reporting in milliseconds.
     *
     * - Setting it to `0` or `false` disables javascript long task reporting.
     * - Values below `100` will be raised to `100`.
     * - Values above `5000` will be lowered to `5000`.
     *
     * Default value is `0`
     */
    longTaskThresholdMs: number | false;
    /**
     * Sets the preferred frequency for collecting mobile vitals.
     */
    vitalsUpdateFrequency: VitalsUpdateFrequency;
    logEventMapper: LogEventMapper | null;
    errorEventMapper: ErrorEventMapper | null;
    resourceEventMapper: ResourceEventMapper | null;
    actionEventMapper: ActionEventMapper | null;
    additionalConfig: {
        [k: string]: any;
    };
    constructor(clientToken: string, env: string, applicationId: string, trackInteractions?: boolean, trackResources?: boolean, trackErrors?: boolean, trackingConsent?: TrackingConsent);
}
/**
 * Auto Instrumentation configuration passed to DatadogProvider.
 * Does not include default values.
 */
export declare type AutoInstrumentationConfiguration = {
    readonly trackInteractions: boolean;
    readonly trackResources: boolean;
    readonly firstPartyHosts?: FirstPartyHostsConfiguration;
    readonly resourceTracingSamplingRate?: number;
    readonly trackErrors: boolean;
    readonly logEventMapper?: LogEventMapper | null;
    readonly errorEventMapper?: ErrorEventMapper | null;
    readonly resourceEventMapper?: ResourceEventMapper | null;
    readonly actionEventMapper?: ActionEventMapper | null;
};
/**
 * Parameters needed to start auto instrumentation. Includes default values.
 */
export declare type AutoInstrumentationParameters = {
    readonly trackInteractions: boolean;
    readonly trackResources: boolean;
    readonly firstPartyHosts: FirstPartyHostsConfiguration;
    readonly resourceTracingSamplingRate: number;
    readonly trackErrors: boolean;
    readonly logEventMapper: LogEventMapper | null;
    readonly errorEventMapper: ErrorEventMapper | null;
    readonly resourceEventMapper: ResourceEventMapper | null;
    readonly actionEventMapper: ActionEventMapper | null;
};
/**
 * We could use `Proxy` instead of this function, but `Proxy` is not available on
 * the older android jsc that can still be used.
 */
export declare const addDefaultValuesToAutoInstrumentationConfiguration: (features: AutoInstrumentationConfiguration) => AutoInstrumentationParameters;
export declare type PartialInitializationConfiguration = {
    readonly clientToken: string;
    readonly env: string;
    readonly applicationId: string;
    readonly sessionSamplingRate?: number;
    readonly site?: string;
    readonly verbosity?: SdkVerbosity | undefined;
    readonly nativeViewTracking?: boolean;
    readonly nativeInteractionTracking?: boolean;
    readonly proxyConfig?: ProxyConfiguration;
    readonly serviceName?: string;
    readonly version?: string;
    versionSuffix?: string;
    readonly additionalConfig?: {
        [k: string]: any;
    };
    readonly trackingConsent?: TrackingConsent;
    readonly longTaskThresholdMs?: number | false;
    readonly nativeLongTaskThresholdMs?: number | false;
    readonly nativeCrashReportEnabled?: boolean;
    readonly telemetrySampleRate?: number;
    readonly vitalsUpdateFrequency?: VitalsUpdateFrequency;
};
export declare const buildConfigurationFromPartialConfiguration: (features: AutoInstrumentationConfiguration, configuration: PartialInitializationConfiguration) => DdSdkReactNativeConfiguration;
export declare class DatadogProviderConfiguration extends DdSdkReactNativeConfiguration {
    initializationMode: InitializationMode;
}
export declare enum InitializationMode {
    SYNC = "SYNC",
    ASYNC = "ASYNC"
}
export declare type InitializationModeForTelemetry = 'LEGACY' | 'SYNC' | 'ASYNC' | 'PARTIAL';
