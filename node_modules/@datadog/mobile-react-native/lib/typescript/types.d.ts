/**
 * A configuration object to initialize Datadog's features.
 */
export declare class DdSdkConfiguration {
    readonly clientToken: string;
    readonly env: string;
    readonly applicationId: string;
    readonly nativeCrashReportEnabled: boolean;
    readonly nativeLongTaskThresholdMs: number;
    readonly longTaskThresholdMs: number;
    readonly sampleRate: number;
    readonly site: string;
    readonly trackingConsent: string;
    readonly additionalConfig: object;
    readonly telemetrySampleRate: number;
    readonly vitalsUpdateFrequency: string;
    readonly configurationForTelemetry: {
        initializationType: string;
        trackErrors: boolean;
        trackInteractions: boolean;
        trackNetworkRequests: boolean;
    };
    constructor(clientToken: string, env: string, applicationId: string, nativeCrashReportEnabled: boolean, nativeLongTaskThresholdMs: number, longTaskThresholdMs: number, sampleRate: number, site: string, trackingConsent: string, additionalConfig: object, telemetrySampleRate: number, vitalsUpdateFrequency: string, configurationForTelemetry: {
        initializationType: string;
        trackErrors: boolean;
        trackInteractions: boolean;
        trackNetworkRequests: boolean;
    });
}
/**
 * The entry point to initialize Datadog's features.
 */
export declare type DdSdkType = {
    /**
     * Initializes Datadog's features.
     * @param configuration: The configuration to use.
     */
    initialize(configuration: DdSdkConfiguration): Promise<void>;
    /**
     * Sets the global context (set of attributes) attached with all future Logs, Spans and RUM events.
     * @param attributes: The global context attributes.
     */
    setAttributes(attributes: object): Promise<void>;
    /**
     * Set the user information.
     * @param user: The user object (use builtin attributes: 'id', 'email', 'name', and/or any custom attribute).
     */
    setUser(user: object): Promise<void>;
    /**
     * Set the tracking consent regarding the data collection.
     * @param trackingConsent: Consent, which can take one of the following values: 'pending', 'granted', 'not_granted'.
     */
    setTrackingConsent(trackingConsent: string): Promise<void>;
};
/**
 * The entry point to use Datadog's Trace feature.
 */
export declare type DdTraceType = {
    /**
     * Start a span, and returns a unique identifier for the span.
     * @param operation: The operation name of the span.
     * @param context: The additional context to send.
     * @param timestampMs: The timestamp when the operation started (in milliseconds). If not provided, current timestamp will be used.
     */
    startSpan(operation: string, context?: object, timestampMs?: number): Promise<string>;
    /**
     * Finish a started span.
     * @param spanId: The unique identifier of the span.
     * @param context: The additional context to send.
     * @param timestampMs: The timestamp when the operation stopped (in milliseconds). If not provided, current timestamp will be used.
     */
    finishSpan(spanId: string, context?: object, timestampMs?: number): Promise<void>;
};
