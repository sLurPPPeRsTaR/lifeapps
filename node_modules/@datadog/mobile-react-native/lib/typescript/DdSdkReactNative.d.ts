import { DdSdkReactNativeConfiguration } from './DdSdkReactNativeConfiguration';
import type { DatadogProviderConfiguration, PartialInitializationConfiguration, AutoInstrumentationConfiguration } from './DdSdkReactNativeConfiguration';
import type { TrackingConsent } from './TrackingConsent';
import type { Attributes } from './sdk/AttributesSingleton/types';
import type { UserInfo } from './sdk/UserInfoSingleton/types';
/**
 * This class initializes the Datadog SDK, and sets up communication with the server.
 */
export declare class DdSdkReactNative {
    private static readonly DD_SOURCE_KEY;
    private static readonly DD_SDK_VERSION;
    private static readonly DD_SERVICE_NAME;
    private static readonly DD_SDK_VERBOSITY_KEY;
    private static readonly DD_NATIVE_VIEW_TRACKING_KEY;
    private static readonly DD_NATIVE_INTERACTION_TRACKING_KEY;
    private static readonly DD_VERSION;
    private static readonly DD_VERSION_SUFFIX;
    private static readonly DD_PROXY_TYPE_KEY;
    private static readonly DD_PROXY_ADDRESS_KEY;
    private static readonly DD_PROXY_PORT_KEY;
    private static readonly DD_PROXY_USERNAME_KEY;
    private static readonly DD_PROXY_PASSWORD_KEY;
    private static wasInitialized;
    private static wasAutoInstrumented;
    private static features?;
    /**
     * Initializes the Datadog SDK.
     * @param configuration the configuration for the SDK library
     * @returns a Promise.
     */
    static initialize(configuration: DdSdkReactNativeConfiguration): Promise<void>;
    private static initializeNativeSDK;
    /**
     * FOR INTERNAL USE ONLY.
     */
    static _initializeFromDatadogProvider(configuration: DatadogProviderConfiguration): Promise<void>;
    /**
     * FOR INTERNAL USE ONLY.
     */
    static _enableFeaturesFromDatadogProvider(features: AutoInstrumentationConfiguration): Promise<void>;
    /**
     * FOR INTERNAL USE ONLY.
     */
    static _initializeFromDatadogProviderWithConfigurationAsync: (configuration: PartialInitializationConfiguration) => Promise<void>;
    /**
     * Adds a set of attributes to the global context attached with all future Logs, Spans and RUM events.
     * To remove an attribute, set it to `undefined` in a call to `setAttributes`.
     * @param attributes: The global context attributes.
     * @returns a Promise.
     */
    static setAttributes(attributes: Attributes): Promise<void>;
    /**
     * Set the user information.
     * @param user: The user object (use builtin attributes: 'id', 'email', 'name', and/or any custom attribute).
     * @returns a Promise.
     */
    static setUser(user: UserInfo): Promise<void>;
    /**
     * Set the tracking consent regarding the data collection.
     * @param trackingConsent: One of TrackingConsent values.
     * @returns a Promise.
     */
    static setTrackingConsent(consent: TrackingConsent): Promise<void>;
    private static buildConfiguration;
    private static enableFeatures;
}
