{"version":3,"sources":["DdLogs.ts"],"names":["generateEmptyPromise","Promise","resolve","DdLogsWrapper","NativeModules","DdLogs","undefined","message","context","status","InternalLog","log","SdkVerbosity","DEBUG","event","logEventMapper","applyEventMapper","nativeLogs","debug","info","warn","error","registerLogEventMapper","unregisterLogEventMapper"],"mappings":";;;;;;;AAMA;;AAEA;;AACA;;AAGA;;;;AAGA,MAAMA,oBAAoB,GAAG,MAAM,IAAIC,OAAJ,CAAkBC,OAAO,IAAIA,OAAO,EAApC,CAAnC;;AAEA,MAAMC,aAAN,CAA0C;AAAA;AAAA,wCACCC,2BAAcC,MADf;;AAAA,4CAEb,sCAAoBC,SAApB,CAFa;;AAAA,iCAoBxB,CACVC,OADU,EAEVC,OAFU,EAGVC,MAHU,KAIM;AAChBC,+BAAYC,GAAZ,CACK,YAAWF,MAAO,SAAQF,OAAQ,GADvC,EAEIK,2BAAaC,KAFjB;;AAIA,YAAMC,KAAK,GAAG,KAAKC,cAAL,CAAoBC,gBAApB,CAAqC;AAC/CT,QAAAA,OAD+C;AAE/CC,QAAAA,OAF+C;AAG/CC,QAAAA;AAH+C,OAArC,CAAd;;AAKA,UAAI,CAACK,KAAL,EAAY;AACR,eAAOd,oBAAoB,EAA3B;AACH;;AACD,aAAO,KAAKiB,UAAL,CAAgBR,MAAhB,EAAwBK,KAAK,CAACP,OAA9B,EAAuCO,KAAK,CAACN,OAA7C,CAAP;AACH,KAtCqC;AAAA;;AAItCU,EAAAA,KAAK,CAACX,OAAD,EAAkBC,OAAe,GAAG,EAApC,EAAuD;AACxD,WAAO,KAAKG,GAAL,CAASJ,OAAT,EAAkBC,OAAlB,EAA2B,OAA3B,CAAP;AACH;;AAEDW,EAAAA,IAAI,CAACZ,OAAD,EAAkBC,OAAe,GAAG,EAApC,EAAuD;AACvD,WAAO,KAAKG,GAAL,CAASJ,OAAT,EAAkBC,OAAlB,EAA2B,MAA3B,CAAP;AACH;;AAEDY,EAAAA,IAAI,CAACb,OAAD,EAAkBC,OAAe,GAAG,EAApC,EAAuD;AACvD,WAAO,KAAKG,GAAL,CAASJ,OAAT,EAAkBC,OAAlB,EAA2B,MAA3B,CAAP;AACH;;AAEDa,EAAAA,KAAK,CAACd,OAAD,EAAkBC,OAAe,GAAG,EAApC,EAAuD;AACxD,WAAO,KAAKG,GAAL,CAASJ,OAAT,EAAkBC,OAAlB,EAA2B,OAA3B,CAAP;AACH;;AAsBDc,EAAAA,sBAAsB,CAACP,cAAD,EAAiC;AACnD,SAAKA,cAAL,GAAsB,sCAAoBA,cAApB,CAAtB;AACH;;AAEDQ,EAAAA,wBAAwB,GAAG;AACvB,SAAKR,cAAL,GAAsB,sCAAoBT,SAApB,CAAtB;AACH;;AA9CqC;;AAiDnC,MAAMD,MAAM,GAAG,IAAIF,aAAJ,EAAf","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport { NativeModules } from 'react-native';\n\nimport { InternalLog } from '../InternalLog';\nimport { SdkVerbosity } from '../SdkVerbosity';\nimport type { DdNativeLogsType } from '../nativeModulesTypes';\n\nimport { generateEventMapper } from './eventMapper';\nimport type { DdLogsType, LogEventMapper } from './types';\n\nconst generateEmptyPromise = () => new Promise<void>(resolve => resolve());\n\nclass DdLogsWrapper implements DdLogsType {\n    private nativeLogs: DdNativeLogsType = NativeModules.DdLogs;\n    private logEventMapper = generateEventMapper(undefined);\n\n    debug(message: string, context: object = {}): Promise<void> {\n        return this.log(message, context, 'debug');\n    }\n\n    info(message: string, context: object = {}): Promise<void> {\n        return this.log(message, context, 'info');\n    }\n\n    warn(message: string, context: object = {}): Promise<void> {\n        return this.log(message, context, 'warn');\n    }\n\n    error(message: string, context: object = {}): Promise<void> {\n        return this.log(message, context, 'error');\n    }\n\n    private log = (\n        message: string,\n        context: object,\n        status: keyof DdNativeLogsType\n    ): Promise<void> => {\n        InternalLog.log(\n            `Tracking ${status} log “${message}”`,\n            SdkVerbosity.DEBUG\n        );\n        const event = this.logEventMapper.applyEventMapper({\n            message,\n            context,\n            status\n        });\n        if (!event) {\n            return generateEmptyPromise();\n        }\n        return this.nativeLogs[status](event.message, event.context);\n    };\n\n    registerLogEventMapper(logEventMapper: LogEventMapper) {\n        this.logEventMapper = generateEventMapper(logEventMapper);\n    }\n\n    unregisterLogEventMapper() {\n        this.logEventMapper = generateEventMapper(undefined);\n    }\n}\n\nexport const DdLogs = new DdLogsWrapper();\n"]}