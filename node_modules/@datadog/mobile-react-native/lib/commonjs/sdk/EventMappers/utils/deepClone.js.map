{"version":3,"sources":["deepClone.ts"],"names":["isDate","object","type","toString","call","slice","isArray","isObject","isSet","isMap","deepClone","originalObject","depth","Date","getTime","Set","map","value","Map","kv","result","key"],"mappings":"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","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nconst isDate = (object: unknown): object is Date => {\n    const type = {}.toString.call(object).slice(8, -1);\n    return type === 'Date';\n};\n\nconst isArray = (object: unknown): object is unknown[] => {\n    const type = {}.toString.call(object).slice(8, -1);\n    return type === 'Array';\n};\n\nconst isObject = (object: unknown): object is Record<string, unknown> => {\n    const type = {}.toString.call(object).slice(8, -1);\n    return type === 'Object';\n};\n\nconst isSet = (object: unknown): object is Set<unknown> => {\n    const type = {}.toString.call(object).slice(8, -1);\n    return type === 'Set';\n};\n\nconst isMap = (object: unknown): object is Map<string, unknown> => {\n    const type = {}.toString.call(object).slice(8, -1);\n    return type === 'Map';\n};\n\n/**\n * Simple deep clone inspired from https://github.com/angus-c/just/blob/master/packages/collection-clone/index.cjs\n * Functions and RegExp will be returned as they are.\n * Maps and Sets are cloned even though they won't be accepted by React Native, just in case they are mutated by the user to avoid side effects.\n *\n * We added support for circular references by limiting the number of depth levels to 8.\n * @param originalObject\n * @returns\n */\nexport const deepClone = <T>(originalObject: T, depth: number = 0): T => {\n    if (isDate(originalObject)) {\n        return (new Date(originalObject.getTime()) as unknown) as T;\n    }\n    if (isSet(originalObject)) {\n        return (new Set(\n            [...originalObject].map(value => deepClone(value))\n        ) as unknown) as T;\n    }\n    if (isMap(originalObject)) {\n        return (new Map(\n            [...originalObject].map(kv => [deepClone(kv[0]), deepClone(kv[1])])\n        ) as unknown) as T;\n    }\n    if (isArray(originalObject)) {\n        if (depth >= 7) {\n            // Break the circular reference here\n            return originalObject;\n        }\n        const result: unknown[] = [];\n        // eslint-disable-next-line guard-for-in\n        for (const key in originalObject) {\n            // include prototype properties\n            result[key] = deepClone(originalObject[key], depth + 1);\n        }\n\n        return (result as unknown) as T;\n    }\n    if (isObject(originalObject)) {\n        if (depth >= 7) {\n            // Break the circular reference here\n            return originalObject;\n        }\n        const result: Record<string, unknown> = {};\n        // eslint-disable-next-line guard-for-in\n        for (const key in originalObject) {\n            // include prototype properties\n            result[key] = deepClone(originalObject[key], depth + 1);\n        }\n\n        return (result as unknown) as T;\n    }\n\n    // primitives and non-supported objects (e.g. functions) land here\n    return originalObject;\n};\n"]}