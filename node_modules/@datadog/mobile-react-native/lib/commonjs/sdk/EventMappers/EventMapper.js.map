{"version":3,"sources":["EventMapper.ts"],"names":["EventMapper","constructor","eventMapper","formatRawEventForMapper","formatMapperEventForNative","formatRawEventForNative","rawEvent","userInfo","UserInfoSingleton","getInstance","getUserInfo","attributes","AttributesSingleton","getAttributes","initialEvent","backupEvent","mappedEvent","error","InternalLog","log","JSON","stringify","SdkVerbosity","WARN","DdSdk","telemetryDebug"],"mappings":";;;;;;;AAMA;;AACA;;AACA;;AACA;;AAEA;;AAGA;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,WAAN,CAAsD;AAYzDC,EAAAA,WAAW,CACPC,WADO,EAEPC,uBAFO,EAMPC,0BANO,EAUPC,uBAVO,EAWT;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,8CAOyBC,QAAD,IAA4C;AAClE,UAAI,CAAC,KAAKJ,WAAV,EAAuB;AACnB,eAAO,KAAKG,uBAAL,CAA6BC,QAA7B,CAAP;AACH,OAHiE,CAKlE;;;AACA,YAAMC,QAAQ,GAAGC,qCAAkBC,WAAlB,GAAgCC,WAAhC,EAAjB;;AACA,YAAMC,UAAU,GAAGC,yCAAoBH,WAApB,GAAkCI,aAAlC,EAAnB;;AACA,YAAMC,YAAY,GAAG,KAAKX,uBAAL,CAA6BG,QAA7B,EAAuC;AACxDC,QAAAA,QADwD;AAExDI,QAAAA;AAFwD,OAAvC,CAArB,CARkE,CAalE;;AACA,YAAMI,WAAW,GAAG,0BAAUD,YAAV,CAApB;;AACA,UAAI;AACA,cAAME,WAAW,GAAG,KAAKd,WAAL,CAAiBY,YAAjB,CAApB;;AACA,YAAI,CAACE,WAAL,EAAkB;AACd,iBAAO,IAAP;AACH;;AACD,eAAO,KAAKZ,0BAAL,CAAgCY,WAAhC,EAA6CD,WAA7C,CAAP;AACH,OAND,CAME,OAAOE,KAAP,EAAc;AACZC,iCAAYC,GAAZ,CACK,yCAAwCC,IAAI,CAACC,SAAL,CACrCN,WADqC,CAEvC,KAAIE,KAAM,EAHhB,EAIIK,2BAAaC,IAJjB;;AAMAC,0BAAMC,cAAN,CAAqB,sCAArB;;AACA,eAAO,KAAKrB,0BAAL,CAAgCW,WAAhC,EAA6CA,WAA7C,CAAP;AACH;AACJ,KAtCC;;AACE,SAAKb,WAAL,GAAmBA,WAAnB;AACA,SAAKC,uBAAL,GAA+BA,uBAA/B;AACA,SAAKC,0BAAL,GAAkCA,0BAAlC;AACA,SAAKC,uBAAL,GAA+BA,uBAA/B;AACH;;AA5BwD","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport { InternalLog } from '../../InternalLog';\nimport { SdkVerbosity } from '../../SdkVerbosity';\nimport { DdSdk } from '../../foundation';\nimport { AttributesSingleton } from '../AttributesSingleton/AttributesSingleton';\nimport type { Attributes } from '../AttributesSingleton/types';\nimport { UserInfoSingleton } from '../UserInfoSingleton/UserInfoSingleton';\nimport type { UserInfo } from '../UserInfoSingleton/types';\n\nimport { deepClone } from './utils/deepClone';\n\nexport type AdditionalEventDataForMapper = {\n    userInfo: UserInfo;\n    attributes: Attributes;\n};\n\n/**\n * Generic class for applying event mappers.\n *\n * Calls params in this order: formatRawEventForMapper, eventMapper, formatMapperEventForNative.\n *\n * @param eventMapper the user-registered event mapper\n * @param formatRawEventForMapper formatter that gets the raw event (from javascript call) and returns the input given to the mapper\n * @param formatMapperEventForNative formatter that gets the ouput of the mapper, and returns the input given to the native SDKs\n * @param formatRawEventForNative called when no event mapper is registered\n */\nexport class EventMapper<RawEvent, MapperEvent, NativeEvent> {\n    private eventMapper?: (event: MapperEvent) => MapperEvent | null;\n    private formatRawEventForMapper: (\n        event: RawEvent,\n        additionalData: AdditionalEventDataForMapper\n    ) => MapperEvent;\n    private formatMapperEventForNative: (\n        event: MapperEvent,\n        originalEvent: MapperEvent\n    ) => NativeEvent;\n    private formatRawEventForNative: (event: RawEvent) => NativeEvent;\n\n    constructor(\n        eventMapper: ((event: MapperEvent) => MapperEvent | null) | undefined,\n        formatRawEventForMapper: (\n            event: RawEvent,\n            additionalData: AdditionalEventDataForMapper\n        ) => MapperEvent,\n        formatMapperEventForNative: (\n            event: MapperEvent,\n            originalEvent: MapperEvent\n        ) => NativeEvent,\n        formatRawEventForNative: (event: RawEvent) => NativeEvent\n    ) {\n        this.eventMapper = eventMapper;\n        this.formatRawEventForMapper = formatRawEventForMapper;\n        this.formatMapperEventForNative = formatMapperEventForNative;\n        this.formatRawEventForNative = formatRawEventForNative;\n    }\n\n    public applyEventMapper = (rawEvent: RawEvent): NativeEvent | null => {\n        if (!this.eventMapper) {\n            return this.formatRawEventForNative(rawEvent);\n        }\n\n        // formatting\n        const userInfo = UserInfoSingleton.getInstance().getUserInfo();\n        const attributes = AttributesSingleton.getInstance().getAttributes();\n        const initialEvent = this.formatRawEventForMapper(rawEvent, {\n            userInfo,\n            attributes\n        });\n\n        // mapper\n        const backupEvent = deepClone(initialEvent);\n        try {\n            const mappedEvent = this.eventMapper(initialEvent);\n            if (!mappedEvent) {\n                return null;\n            }\n            return this.formatMapperEventForNative(mappedEvent, backupEvent);\n        } catch (error) {\n            InternalLog.log(\n                `The event mapper crashed when mapping ${JSON.stringify(\n                    backupEvent\n                )}: ${error}`,\n                SdkVerbosity.WARN\n            );\n            DdSdk.telemetryDebug('Error while running the event mapper');\n            return this.formatMapperEventForNative(backupEvent, backupEvent);\n        }\n    };\n}\n"]}