"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InitializationMode = exports.DatadogProviderConfiguration = exports.buildConfigurationFromPartialConfiguration = exports.addDefaultValuesToAutoInstrumentationConfiguration = exports.DdSdkReactNativeConfiguration = exports.formatFirstPartyHosts = exports.VitalsUpdateFrequency = void 0;

var _TrackingConsent = require("./TrackingConsent");

var _types = require("./rum/types");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let VitalsUpdateFrequency;
exports.VitalsUpdateFrequency = VitalsUpdateFrequency;

(function (VitalsUpdateFrequency) {
  VitalsUpdateFrequency["FREQUENT"] = "FREQUENT";
  VitalsUpdateFrequency["AVERAGE"] = "AVERAGE";
  VitalsUpdateFrequency["RARE"] = "RARE";
  VitalsUpdateFrequency["NEVER"] = "NEVER";
})(VitalsUpdateFrequency || (exports.VitalsUpdateFrequency = VitalsUpdateFrequency = {}));

const isLegacyFirstPartyHost = firstPartyHost => {
  return typeof firstPartyHost === 'string';
};
/**
 * Defaults legacy first party hosts format to Datadog first party hosts to keep
 * retro-compatibility before OTel support was introduced.
 */


const formatFirstPartyHosts = firstPartyHosts => {
  return firstPartyHosts.map(host => {
    if (isLegacyFirstPartyHost(host)) {
      return {
        match: host,
        propagatorTypes: [_types.PropagatorType.DATADOG]
      };
    }

    return host;
  });
};

exports.formatFirstPartyHosts = formatFirstPartyHosts;
const DEFAULTS = {
  nativeCrashReportEnabled: false,
  sessionSamplingRate: 100.0,
  resourceTracingSamplingRate: 20.0,
  site: 'US1',
  longTaskThresholdMs: 0,
  nativeLongTaskThresholdMs: 200,
  nativeViewTracking: false,
  nativeInteractionTracking: false,
  getFirstPartyHosts: () => [],
  getAdditionalConfig: () => ({}),
  trackingConsent: _TrackingConsent.TrackingConsent.GRANTED,
  telemetrySampleRate: 20.0,
  vitalsUpdateFrequency: VitalsUpdateFrequency.AVERAGE,
  logEventMapper: null,
  errorEventMapper: null,
  resourceEventMapper: null,
  actionEventMapper: null
};
/**
 * The SDK configuration class.
 * It will be used to configure the SDK functionality at initialization.
 */

class DdSdkReactNativeConfiguration {
  /**
   * Enables crash reporting for native plaforms (iOS, Android). Default `false`.
   */

  /**
   * @deprecated `sampleRate` has been replaced by `sessionSamplingRate` to avoid confusion with `resourceTracingSamplingRate` and will be removed in a future release.
   */

  /**
   * Percentage of sampled RUM sessions. Range `0`-`100`.
   */

  /**
   * Percentage of tracing integrations for network calls between your app and your backend. Range `0`-`100`.
   */

  /**
   * Verbosity for internal SDK logging.
   * Set to `SdkVerbosity.DEBUG` to debug your SDK implementation.
   */

  /**
   * Enables native views tracking.
   * Set to `true` if you use a custom navigation system relying on native views.
   */

  /**
   * Enables native interaction tracking.
   * Set to `true` if you want to track interactions on native screens.
   */

  /**
   * List of your backends hosts to enable tracing with.
   * Regular expressions are NOT supported.
   *
   * Matches domains and subdomains, e.g. `['example.com']` matches `example.com` and `api.example.com`.
   */

  /**
   * Overrides the reported version of the app.
   * Accepted characters are alphanumerics and `_`, `-`, `:`, `.`, `/`.
   * Other special characters are converted to underscores.
   *
   * See https://docs.datadoghq.com/getting_started/tagging/#define-tags for more information on the format.
   *
   * Make sure you set it correctly, as it will have to match the one specified during the upload of your source maps and other mapping files.
   */

  /**
   * Add a suffix to the reported version of the app.
   * Accepted characters are alphanumerics and `_`, `-`, `:`, `.`, `/`.
   * Other special characters are converted to underscores.
   *
   * See https://docs.datadoghq.com/getting_started/tagging/#define-tags for more information on the format.
   *
   * A dash (`-`) will be automatically added between the version and the suffix
   */

  /**
   * The sampling rate for Internal Telemetry (info related to the work of the
   * SDK internals).
   *
   * The sampling rate must be a value between 0 and 100. A value of 0 means no
   * telemetry will be sent, 100 means all telemetry will be sent. When
   * `telemetrySampleRate` is not set, the default value from the iOS and
   * Android SDK is used, which is 20.
   */

  /**
   * The threshold for native long tasks reporting in milliseconds.
   *
   * - Setting it to `0` or `false` disables native long task reporting.
   * - Values below `100` will be raised to `100`.
   * - Values above `5000` will be lowered to `5000`.
   *
   * Default value is `200`.
   */

  /**
   * The threshold for javascript long tasks reporting in milliseconds.
   *
   * - Setting it to `0` or `false` disables javascript long task reporting.
   * - Values below `100` will be raised to `100`.
   * - Values above `5000` will be lowered to `5000`.
   *
   * Default value is `0`
   */

  /**
   * Sets the preferred frequency for collecting mobile vitals.
   */
  constructor(clientToken, env, applicationId, trackInteractions = false, trackResources = false, trackErrors = false, trackingConsent = DEFAULTS.trackingConsent) {
    this.clientToken = clientToken;
    this.env = env;
    this.applicationId = applicationId;
    this.trackInteractions = trackInteractions;
    this.trackResources = trackResources;
    this.trackErrors = trackErrors;
    this.trackingConsent = trackingConsent;

    _defineProperty(this, "nativeCrashReportEnabled", DEFAULTS.nativeCrashReportEnabled);

    _defineProperty(this, "sampleRate", void 0);

    _defineProperty(this, "sessionSamplingRate", DEFAULTS.sessionSamplingRate);

    _defineProperty(this, "resourceTracingSamplingRate", DEFAULTS.resourceTracingSamplingRate);

    _defineProperty(this, "site", DEFAULTS.site);

    _defineProperty(this, "verbosity", undefined);

    _defineProperty(this, "nativeViewTracking", DEFAULTS.nativeViewTracking);

    _defineProperty(this, "nativeInteractionTracking", DEFAULTS.nativeInteractionTracking);

    _defineProperty(this, "proxyConfig", undefined);

    _defineProperty(this, "serviceName", undefined);

    _defineProperty(this, "firstPartyHosts", DEFAULTS.getFirstPartyHosts());

    _defineProperty(this, "version", void 0);

    _defineProperty(this, "versionSuffix", void 0);

    _defineProperty(this, "telemetrySampleRate", DEFAULTS.telemetrySampleRate);

    _defineProperty(this, "nativeLongTaskThresholdMs", DEFAULTS.nativeLongTaskThresholdMs);

    _defineProperty(this, "longTaskThresholdMs", DEFAULTS.longTaskThresholdMs);

    _defineProperty(this, "vitalsUpdateFrequency", DEFAULTS.vitalsUpdateFrequency);

    _defineProperty(this, "logEventMapper", DEFAULTS.logEventMapper);

    _defineProperty(this, "errorEventMapper", DEFAULTS.errorEventMapper);

    _defineProperty(this, "resourceEventMapper", DEFAULTS.resourceEventMapper);

    _defineProperty(this, "actionEventMapper", DEFAULTS.actionEventMapper);

    _defineProperty(this, "additionalConfig", DEFAULTS.getAdditionalConfig());
  }

}
/**
 * Auto Instrumentation configuration passed to DatadogProvider.
 * Does not include default values.
 */


exports.DdSdkReactNativeConfiguration = DdSdkReactNativeConfiguration;

/**
 * We could use `Proxy` instead of this function, but `Proxy` is not available on
 * the older android jsc that can still be used.
 */
const addDefaultValuesToAutoInstrumentationConfiguration = features => {
  return { ...features,
    firstPartyHosts: features.firstPartyHosts || DEFAULTS.getFirstPartyHosts(),
    resourceTracingSamplingRate: features.resourceTracingSamplingRate === undefined ? DEFAULTS.resourceTracingSamplingRate : features.resourceTracingSamplingRate,
    logEventMapper: features.logEventMapper === undefined ? DEFAULTS.logEventMapper : features.logEventMapper,
    errorEventMapper: features.errorEventMapper === undefined ? DEFAULTS.errorEventMapper : features.errorEventMapper,
    resourceEventMapper: features.resourceEventMapper === undefined ? DEFAULTS.resourceEventMapper : features.resourceEventMapper,
    actionEventMapper: features.actionEventMapper === undefined ? DEFAULTS.actionEventMapper : features.actionEventMapper
  };
};

exports.addDefaultValuesToAutoInstrumentationConfiguration = addDefaultValuesToAutoInstrumentationConfiguration;

const setConfigurationAttribute = (attribute, configuration) => {
  if (attribute.value !== undefined) {
    configuration[attribute.name] = attribute.value;
  }
};

const buildConfigurationFromPartialConfiguration = (features, configuration) => {
  const {
    clientToken,
    env,
    applicationId,
    ...remainingConfiguration
  } = configuration;
  const SdkConfiguration = new DdSdkReactNativeConfiguration(clientToken, env, applicationId, features.trackInteractions, features.trackResources, features.trackErrors, configuration.trackingConsent);
  Object.keys(remainingConfiguration).forEach(name => {
    setConfigurationAttribute({
      value: remainingConfiguration[name],
      name
    }, SdkConfiguration);
  });
  setConfigurationAttribute({
    name: 'resourceTracingSamplingRate',
    value: features.resourceTracingSamplingRate
  }, SdkConfiguration);
  setConfigurationAttribute({
    name: 'firstPartyHosts',
    value: features.firstPartyHosts
  }, SdkConfiguration);
  setConfigurationAttribute({
    name: 'logEventMapper',
    value: features.logEventMapper
  }, SdkConfiguration);
  setConfigurationAttribute({
    name: 'errorEventMapper',
    value: features.errorEventMapper
  }, SdkConfiguration);
  setConfigurationAttribute({
    name: 'resourceEventMapper',
    value: features.resourceEventMapper
  }, SdkConfiguration);
  setConfigurationAttribute({
    name: 'actionEventMapper',
    value: features.actionEventMapper
  }, SdkConfiguration);
  return SdkConfiguration;
};

exports.buildConfigurationFromPartialConfiguration = buildConfigurationFromPartialConfiguration;

class DatadogProviderConfiguration extends DdSdkReactNativeConfiguration {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "initializationMode", InitializationMode.SYNC);
  }

}

exports.DatadogProviderConfiguration = DatadogProviderConfiguration;
let InitializationMode;
exports.InitializationMode = InitializationMode;

(function (InitializationMode) {
  InitializationMode["SYNC"] = "SYNC";
  InitializationMode["ASYNC"] = "ASYNC";
})(InitializationMode || (exports.InitializationMode = InitializationMode = {}));
//# sourceMappingURL=DdSdkReactNativeConfiguration.js.map