"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DdRumUserInteractionTracking = void 0;

var _react = _interopRequireDefault(require("react"));

var _InternalLog = require("../../../InternalLog");

var _SdkVerbosity = require("../../../SdkVerbosity");

var _errorUtils = require("../../../errorUtils");

var _foundation = require("../../../foundation");

var _DdEventsInterceptor = require("./DdEventsInterceptor");

var _NoOpEventsInterceptor = _interopRequireDefault(require("./NoOpEventsInterceptor"));

var _ShallowObjectEqualityChecker = require("./ShallowObjectEqualityChecker");

var _getJsxRuntime = require("./getJsxRuntime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Provides RUM auto-instrumentation feature to track user interaction as RUM events.
 * For now we are only covering the "onPress" events.
 */
class DdRumUserInteractionTracking {
  /**
   * Starts tracking user interactions and sends a RUM Action event every time a new interaction was detected.
   * Please note that we are only considering as valid - for - tracking only the user interactions that have
   * a visible output (either an UI state change or a Resource request)
   */
  static startTracking() {
    // extra safety to avoid wrapping more than 1 time this function
    if (DdRumUserInteractionTracking.isTracking) {
      _InternalLog.InternalLog.log('Datadog SDK is already tracking interactions', _SdkVerbosity.SdkVerbosity.WARN);

      return;
    }

    DdRumUserInteractionTracking.eventsInterceptor = new _DdEventsInterceptor.DdEventsInterceptor();
    const original = _react.default.createElement;

    _react.default.createElement = (...args) => {
      return this.patchCreateElementFunction(original, args);
    };

    try {
      const jsxRuntime = (0, _getJsxRuntime.getJsxRuntime)();
      const originaljsx = jsxRuntime.jsx;
      this.originalJsx = originaljsx;

      jsxRuntime.jsx = (...args) => {
        return this.patchCreateElementFunction(originaljsx, args);
      };
    } catch (e) {
      _foundation.DdSdk.telemetryDebug((0, _errorUtils.getErrorMessage)(e));
    }

    const originalMemo = _react.default.memo;

    _react.default.memo = (component, propsAreEqual) => {
      return originalMemo(component, (prev, next) => {
        if (!next.onPress || !prev.onPress) {
          return propsAreEqual ? propsAreEqual(prev, next) : (0, _ShallowObjectEqualityChecker.areObjectShallowEqual)(prev, next);
        } // we replace "our" onPress from the props by the original for comparison


        const {
          onPress: _prevOnPress,
          ...partialPrevProps
        } = prev;
        const prevProps = { ...partialPrevProps,
          onPress: prev.__DATADOG_INTERNAL_ORIGINAL_ON_PRESS__
        };
        const {
          onPress: _nextOnPress,
          ...partialNextProps
        } = next;
        const nextProps = { ...partialNextProps,
          onPress: next.__DATADOG_INTERNAL_ORIGINAL_ON_PRESS__
        }; // if no comparison function is provided we do shallow comparison

        return propsAreEqual ? propsAreEqual(prevProps, nextProps) : (0, _ShallowObjectEqualityChecker.areObjectShallowEqual)(nextProps, prevProps);
      });
    };

    DdRumUserInteractionTracking.isTracking = true;

    _InternalLog.InternalLog.log('Datadog SDK is tracking interactions', _SdkVerbosity.SdkVerbosity.INFO);
  }

  static stopTracking() {
    _react.default.createElement = this.originalCreateElement;
    _react.default.memo = this.originalMemo;
    DdRumUserInteractionTracking.isTracking = false;

    if (this.originalJsx) {
      const jsxRuntime = (0, _getJsxRuntime.getJsxRuntime)();
      jsxRuntime.jsx = this.originalJsx;
      this.originalJsx = null;
    }
  }

}

exports.DdRumUserInteractionTracking = DdRumUserInteractionTracking;

_defineProperty(DdRumUserInteractionTracking, "isTracking", false);

_defineProperty(DdRumUserInteractionTracking, "eventsInterceptor", new _NoOpEventsInterceptor.default());

_defineProperty(DdRumUserInteractionTracking, "originalCreateElement", _react.default.createElement);

_defineProperty(DdRumUserInteractionTracking, "originalMemo", _react.default.memo);

_defineProperty(DdRumUserInteractionTracking, "originalJsx", null);

_defineProperty(DdRumUserInteractionTracking, "patchCreateElementFunction", (originalFunction, [element, props, ...rest]) => {
  if (props && typeof props.onPress === 'function') {
    const originalOnPress = props. // eslint-disable-next-line @typescript-eslint/ban-types
    onPress;

    props.onPress = (...args) => {
      DdRumUserInteractionTracking.eventsInterceptor.interceptOnPress(...args);
      return originalOnPress(...args);
    }; // we store the original onPress prop so we can keep memoization working


    props.__DATADOG_INTERNAL_ORIGINAL_ON_PRESS__ = originalOnPress;
  }

  return originalFunction(element, props, ...rest);
});
//# sourceMappingURL=DdRumUserInteractionTracking.js.map