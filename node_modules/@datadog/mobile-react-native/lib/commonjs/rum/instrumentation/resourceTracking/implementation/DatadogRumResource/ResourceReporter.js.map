{"version":3,"sources":["ResourceReporter.ts"],"names":["ResourceReporter","constructor","resourceMappers","resource","modifiedResource","mapper","mappers","reportResource","formatResourceStartContext","tracingAttributes","samplingPriorityHeader","undefined","spanId","toString","traceId","rulePsr","formatResourceStopContext","timings","responseStartTime","startTime","stopTime","DdRum","startResource","key","request","method","url","stopResource","response","statusCode","kind","size","resourceContext"],"mappings":";;;;;;;AAMA;;AAGA;;;;AAIO,MAAMA,gBAAN,CAAuB;AAG1BC,EAAAA,WAAW,CAACC,eAAD,EAAoC;AAAA;;AAAA,4CAI7BC,QAAD,IAA2B;AACxC,UAAIC,gBAAoC,GAAGD,QAA3C;;AAEA,WAAK,MAAME,MAAX,IAAqB,KAAKC,OAA1B,EAAmC;AAC/BF,QAAAA,gBAAgB,GAAGC,MAAM,CAACF,QAAD,CAAzB;;AACA,YAAIC,gBAAgB,KAAK,IAAzB,EAA+B;AAC3B;AACH;AACJ;;AAEDG,MAAAA,cAAc,CAACH,gBAAD,CAAd;AACH,KAf8C;;AAC3C,SAAKE,OAAL,GAAeJ,eAAf;AACH;;AALyB;;;;AAqB9B,MAAMM,0BAA0B,GAC5BC,iBAD+B,IAEe;AAC9C,SAAOA,iBAAiB,CAACC,sBAAlB,KAA6C,GAA7C,GACDC,SADC,GAED;AACI,mBAAeF,iBAAiB,CAACG,MAAlB,CAAyBC,QAAzB,CAAkC,EAAlC,CADnB;AAEI,oBAAgBJ,iBAAiB,CAACK,OAAlB,CAA0BD,QAA1B,CAAmC,EAAnC,CAFpB;AAGI,oBAAgBJ,iBAAiB,CAACM;AAHtC,GAFN;AAOH,CAVD;;AAYA,MAAMC,yBAAyB,GAC3BC,OAD8B,IAEJ;AAC1B,SAAO;AACH,4BACIA,OAAO,CAACC,iBAAR,KAA8BP,SAA9B,GACM,mCACIM,OAAO,CAACE,SADZ,EAEIF,OAAO,CAACC,iBAFZ,EAGID,OAAO,CAACG,QAHZ,CADN,GAMM;AARP,GAAP;AAUH,CAbD;;AAeA,MAAMb,cAAc,GAAG,MAAOJ,QAAP,IAAiC;AACpD,QAAMkB,aAAMC,aAAN,CACFnB,QAAQ,CAACoB,GADP,EAEFpB,QAAQ,CAACqB,OAAT,CAAiBC,MAFf,EAGFtB,QAAQ,CAACqB,OAAT,CAAiBE,GAHf,EAIFlB,0BAA0B,CAACL,QAAQ,CAACM,iBAAV,CAJxB,EAKFN,QAAQ,CAACc,OAAT,CAAiBE,SALf,CAAN;;AAQAE,eAAMM,YAAN,CACIxB,QAAQ,CAACoB,GADb,EAEIpB,QAAQ,CAACyB,QAAT,CAAkBC,UAFtB,EAGI1B,QAAQ,CAACqB,OAAT,CAAiBM,IAHrB,EAII3B,QAAQ,CAACyB,QAAT,CAAkBG,IAJtB,EAKIf,yBAAyB,CAACb,QAAQ,CAACc,OAAV,CAL7B,EAMId,QAAQ,CAACc,OAAT,CAAiBG,QANrB,EAOIjB,QAAQ,CAAC6B,eAPb;AASH,CAlBD","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport { DdRum } from '../../../../DdRum';\nimport type { RUMResource } from '../../domain/interfaces/RumResource';\n\nimport { createTimings } from './resourceTiming';\n\ntype ResourceMapper = (resource: RUMResource) => RUMResource | null;\n\nexport class ResourceReporter {\n    private mappers: ResourceMapper[];\n\n    constructor(resourceMappers: ResourceMapper[]) {\n        this.mappers = resourceMappers;\n    }\n\n    reportResource = (resource: RUMResource) => {\n        let modifiedResource: RUMResource | null = resource;\n\n        for (const mapper of this.mappers) {\n            modifiedResource = mapper(resource);\n            if (modifiedResource === null) {\n                return;\n            }\n        }\n\n        reportResource(modifiedResource);\n    };\n}\n\nconst formatResourceStartContext = (\n    tracingAttributes: RUMResource['tracingAttributes']\n): Record<string, string | number> | undefined => {\n    return tracingAttributes.samplingPriorityHeader === '0'\n        ? undefined\n        : {\n              '_dd.span_id': tracingAttributes.spanId.toString(10),\n              '_dd.trace_id': tracingAttributes.traceId.toString(10),\n              '_dd.rule_psr': tracingAttributes.rulePsr\n          };\n};\n\nconst formatResourceStopContext = (\n    timings: RUMResource['timings']\n): Record<string, unknown> => {\n    return {\n        '_dd.resource_timings':\n            timings.responseStartTime !== undefined\n                ? createTimings(\n                      timings.startTime,\n                      timings.responseStartTime,\n                      timings.stopTime\n                  )\n                : null\n    };\n};\n\nconst reportResource = async (resource: RUMResource) => {\n    await DdRum.startResource(\n        resource.key,\n        resource.request.method,\n        resource.request.url,\n        formatResourceStartContext(resource.tracingAttributes),\n        resource.timings.startTime\n    );\n\n    DdRum.stopResource(\n        resource.key,\n        resource.response.statusCode,\n        resource.request.kind,\n        resource.response.size,\n        formatResourceStopContext(resource.timings),\n        resource.timings.stopTime,\n        resource.resourceContext\n    );\n};\n"]}