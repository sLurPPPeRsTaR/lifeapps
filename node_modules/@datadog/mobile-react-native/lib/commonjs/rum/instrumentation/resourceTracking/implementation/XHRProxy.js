"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XHRProxy = void 0;

var _Timer = _interopRequireDefault(require("../../../../Timer"));

var _distributedTracingHeaders = require("../domain/distributedTracingHeaders");

var _distributedTracing = require("../domain/distributedTracing");

var _RequestProxy = require("../domain/interfaces/RequestProxy");

var _URLHostParser = require("./URLHostParser");

var _responseSize = require("./responseSize");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const RESPONSE_START_LABEL = 'response_start';

/**
 * Proxies XMLHTTPRequest to track resources.
 */
class XHRProxy extends _RequestProxy.RequestProxy {
  constructor(providers) {
    super();

    _defineProperty(this, "providers", void 0);

    _defineProperty(this, "onTrackingStart", context => {
      XHRProxy.originalXhrOpen = this.providers.xhrType.prototype.open;
      XHRProxy.originalXhrSend = this.providers.xhrType.prototype.send;
      proxyRequests(this.providers, context);
    });

    _defineProperty(this, "onTrackingStop", () => {
      this.providers.xhrType.prototype.open = XHRProxy.originalXhrOpen;
      this.providers.xhrType.prototype.send = XHRProxy.originalXhrSend;
    });

    this.providers = providers;
  }

}

exports.XHRProxy = XHRProxy;

_defineProperty(XHRProxy, "originalXhrOpen", void 0);

_defineProperty(XHRProxy, "originalXhrSend", void 0);

const proxyRequests = (providers, context) => {
  proxyOpen(providers, context);
  proxySend(providers);
};

const proxyOpen = ({
  xhrType
}, context) => {
  const originalXhrOpen = xhrType.prototype.open;
  const firstPartyHostsRegexMap = context.firstPartyHostsRegexMap;
  const tracingSamplingRate = context.tracingSamplingRate;

  xhrType.prototype.open = function (method, url) {
    const hostname = (0, _URLHostParser.URLHostParser)(url); // Keep track of the method and url
    // start time is tracked by the `send` method

    this._datadog_xhr = {
      method,
      url,
      reported: false,
      timer: new _Timer.default(),
      tracingAttributes: (0, _distributedTracing.getTracingAttributes)({
        hostname,
        firstPartyHostsRegexMap,
        tracingSamplingRate
      })
    }; // eslint-disable-next-line prefer-rest-params

    return originalXhrOpen.apply(this, arguments);
  };
};

const proxySend = providers => {
  const xhrType = providers.xhrType;
  const originalXhrSend = xhrType.prototype.send;

  xhrType.prototype.send = function () {
    if (this._datadog_xhr) {
      // keep track of start time
      this._datadog_xhr.timer.start();

      const tracingHeaders = (0, _distributedTracingHeaders.getTracingHeaders)(this._datadog_xhr.tracingAttributes);
      tracingHeaders.forEach(({
        header,
        value
      }) => {
        this.setRequestHeader(header, value);
      });
    }

    proxyOnReadyStateChange(this, providers); // eslint-disable-next-line prefer-rest-params

    return originalXhrSend.apply(this, arguments);
  };
};

const proxyOnReadyStateChange = (xhrProxy, providers) => {
  const xhrType = providers.xhrType;
  const originalOnreadystatechange = xhrProxy.onreadystatechange;

  xhrProxy.onreadystatechange = function () {
    if (xhrProxy.readyState === xhrType.DONE) {
      if (!xhrProxy._datadog_xhr.reported) {
        reportXhr(xhrProxy, providers.resourceReporter);
        xhrProxy._datadog_xhr.reported = true;
      }
    } else if (xhrProxy.readyState === xhrType.HEADERS_RECEIVED) {
      xhrProxy._datadog_xhr.timer.recordTick(RESPONSE_START_LABEL);
    }

    if (originalOnreadystatechange) {
      // eslint-disable-next-line prefer-rest-params
      originalOnreadystatechange.apply(xhrProxy, arguments);
    }
  };
};

const reportXhr = async (xhrProxy, resourceReporter) => {
  const responseSize = (0, _responseSize.calculateResponseSize)(xhrProxy);
  const context = xhrProxy._datadog_xhr;
  const key = `${context.timer.startTime}/${context.method}`;
  context.timer.stop();
  resourceReporter.reportResource({
    key,
    request: {
      method: context.method,
      url: context.url,
      kind: 'xhr'
    },
    tracingAttributes: context.tracingAttributes,
    response: {
      statusCode: xhrProxy.status,
      size: responseSize
    },
    timings: {
      startTime: context.timer.startTime,
      stopTime: context.timer.stopTime,
      responseStartTime: context.timer.hasTickFor(RESPONSE_START_LABEL) ? context.timer.timeAt(RESPONSE_START_LABEL) : undefined
    },
    resourceContext: xhrProxy
  });
};
//# sourceMappingURL=XHRProxy.js.map