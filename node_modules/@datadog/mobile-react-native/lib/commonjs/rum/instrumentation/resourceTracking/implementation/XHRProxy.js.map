{"version":3,"sources":["XHRProxy.ts"],"names":["RESPONSE_START_LABEL","XHRProxy","RequestProxy","constructor","providers","context","originalXhrOpen","xhrType","prototype","open","originalXhrSend","send","proxyRequests","proxyOpen","proxySend","firstPartyHostsRegexMap","tracingSamplingRate","method","url","hostname","_datadog_xhr","reported","timer","Timer","tracingAttributes","apply","arguments","start","tracingHeaders","forEach","header","value","setRequestHeader","proxyOnReadyStateChange","xhrProxy","originalOnreadystatechange","onreadystatechange","readyState","DONE","reportXhr","resourceReporter","HEADERS_RECEIVED","recordTick","responseSize","key","startTime","stop","reportResource","request","kind","response","statusCode","status","size","timings","stopTime","responseStartTime","hasTickFor","timeAt","undefined","resourceContext"],"mappings":"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","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport Timer from '../../../../Timer';\nimport { getTracingHeaders } from '../domain/distributedTracingHeaders';\nimport type { DdRumResourceTracingAttributes } from '../domain/distributedTracing';\nimport { getTracingAttributes } from '../domain/distributedTracing';\nimport type { RequestProxyOptions } from '../domain/interfaces/RequestProxy';\nimport { RequestProxy } from '../domain/interfaces/RequestProxy';\n\nimport type { ResourceReporter } from './DatadogRumResource/ResourceReporter';\nimport { URLHostParser } from './URLHostParser';\nimport { calculateResponseSize } from './responseSize';\n\nconst RESPONSE_START_LABEL = 'response_start';\n\ninterface DdRumXhr extends XMLHttpRequest {\n    _datadog_xhr: DdRumXhrContext;\n}\n\ninterface DdRumXhrContext {\n    method: string;\n    url: string;\n    reported: boolean;\n    timer: Timer;\n    tracingAttributes: DdRumResourceTracingAttributes;\n}\n\ninterface XHRProxyProviders {\n    xhrType: typeof XMLHttpRequest;\n    resourceReporter: ResourceReporter;\n}\n\n/**\n * Proxies XMLHTTPRequest to track resources.\n */\nexport class XHRProxy extends RequestProxy {\n    private providers: XHRProxyProviders;\n    private static originalXhrOpen: typeof XMLHttpRequest.prototype.open;\n    private static originalXhrSend: typeof XMLHttpRequest.prototype.send;\n\n    constructor(providers: XHRProxyProviders) {\n        super();\n        this.providers = providers;\n    }\n\n    onTrackingStart = (context: RequestProxyOptions) => {\n        XHRProxy.originalXhrOpen = this.providers.xhrType.prototype.open;\n        XHRProxy.originalXhrSend = this.providers.xhrType.prototype.send;\n        proxyRequests(this.providers, context);\n    };\n\n    onTrackingStop = () => {\n        this.providers.xhrType.prototype.open = XHRProxy.originalXhrOpen;\n        this.providers.xhrType.prototype.send = XHRProxy.originalXhrSend;\n    };\n}\n\nconst proxyRequests = (\n    providers: XHRProxyProviders,\n    context: RequestProxyOptions\n): void => {\n    proxyOpen(providers, context);\n    proxySend(providers);\n};\n\nconst proxyOpen = (\n    { xhrType }: XHRProxyProviders,\n    context: RequestProxyOptions\n): void => {\n    const originalXhrOpen = xhrType.prototype.open;\n    const firstPartyHostsRegexMap = context.firstPartyHostsRegexMap;\n    const tracingSamplingRate = context.tracingSamplingRate;\n\n    xhrType.prototype.open = function (\n        this: DdRumXhr,\n        method: string,\n        url: string\n    ) {\n        const hostname = URLHostParser(url);\n        // Keep track of the method and url\n        // start time is tracked by the `send` method\n        this._datadog_xhr = {\n            method,\n            url,\n            reported: false,\n            timer: new Timer(),\n            tracingAttributes: getTracingAttributes({\n                hostname,\n                firstPartyHostsRegexMap,\n                tracingSamplingRate\n            })\n        };\n        // eslint-disable-next-line prefer-rest-params\n        return originalXhrOpen.apply(this, arguments as any);\n    };\n};\n\nconst proxySend = (providers: XHRProxyProviders): void => {\n    const xhrType = providers.xhrType;\n    const originalXhrSend = xhrType.prototype.send;\n\n    xhrType.prototype.send = function (this: DdRumXhr) {\n        if (this._datadog_xhr) {\n            // keep track of start time\n            this._datadog_xhr.timer.start();\n\n            const tracingHeaders = getTracingHeaders(\n                this._datadog_xhr.tracingAttributes\n            );\n            tracingHeaders.forEach(({ header, value }) => {\n                this.setRequestHeader(header, value);\n            });\n        }\n\n        proxyOnReadyStateChange(this, providers);\n\n        // eslint-disable-next-line prefer-rest-params\n        return originalXhrSend.apply(this, arguments as any);\n    };\n};\n\nconst proxyOnReadyStateChange = (\n    xhrProxy: DdRumXhr,\n    providers: XHRProxyProviders\n): void => {\n    const xhrType = providers.xhrType;\n    const originalOnreadystatechange = xhrProxy.onreadystatechange;\n\n    xhrProxy.onreadystatechange = function () {\n        if (xhrProxy.readyState === xhrType.DONE) {\n            if (!xhrProxy._datadog_xhr.reported) {\n                reportXhr(xhrProxy, providers.resourceReporter);\n                xhrProxy._datadog_xhr.reported = true;\n            }\n        } else if (xhrProxy.readyState === xhrType.HEADERS_RECEIVED) {\n            xhrProxy._datadog_xhr.timer.recordTick(RESPONSE_START_LABEL);\n        }\n\n        if (originalOnreadystatechange) {\n            // eslint-disable-next-line prefer-rest-params\n            originalOnreadystatechange.apply(xhrProxy, arguments as any);\n        }\n    };\n};\n\nconst reportXhr = async (\n    xhrProxy: DdRumXhr,\n    resourceReporter: ResourceReporter\n): Promise<void> => {\n    const responseSize = calculateResponseSize(xhrProxy);\n\n    const context = xhrProxy._datadog_xhr;\n\n    const key = `${context.timer.startTime}/${context.method}`;\n\n    context.timer.stop();\n\n    resourceReporter.reportResource({\n        key,\n        request: {\n            method: context.method,\n            url: context.url,\n            kind: 'xhr'\n        },\n        tracingAttributes: context.tracingAttributes,\n        response: {\n            statusCode: xhrProxy.status,\n            size: responseSize\n        },\n        timings: {\n            startTime: context.timer.startTime,\n            stopTime: context.timer.stopTime,\n            responseStartTime: context.timer.hasTickFor(RESPONSE_START_LABEL)\n                ? context.timer.timeAt(RESPONSE_START_LABEL)\n                : undefined\n        },\n        resourceContext: xhrProxy\n    });\n};\n"]}