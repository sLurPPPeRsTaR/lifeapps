{"version":3,"sources":["types.ts"],"names":["RumActionType","ErrorSource","PropagatorType"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AA0IA;AACA;AACA;IACYA,a;;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,6BAAAA,a;;IA0BAC,W;AAQZ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WAdYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,2BAAAA,W;;IAeAC,c;;;WAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,8BAAAA,c","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\n/**\n * The entry point to use Datadog's RUM feature.\n */\nexport type DdRumType = {\n    /**\n     * Start tracking a RUM View.\n     * @param key: The view unique key identifier.\n     * @param name: The view name.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the view started (in milliseconds). If not provided, current timestamp will be used.\n     */\n    startView(\n        key: string,\n        name: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Stop tracking a RUM View.\n     * @param key: The view unique key identifier.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the view stopped (in milliseconds). If not provided, current timestamp will be used.\n     */\n    stopView(\n        key: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Start tracking a RUM Action.\n     * @param type: The action type (tap, scroll, swipe, back, custom).\n     * @param name: The action name.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the action started (in milliseconds). If not provided, current timestamp will be used.\n     */\n    startAction(\n        type: RumActionType,\n        name: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Stop tracking the ongoing RUM Action.\n     * @param type: The action type (tap, scroll, swipe, back, custom).\n     * @param name: The action name.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the action stopped (in milliseconds). If not provided, current timestamp will be used.\n     */\n    stopAction(\n        type: RumActionType,\n        name: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Stop tracking the ongoing RUM Action.\n     *\n     * Warning: using this function signature can lead to inconsistent behaviors on iOS and Android when multiple actions are started in parallel.\n     *\n     * @deprecated add the `type` and `name` of the action as first two arguments.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the action stopped (in milliseconds). If not provided, current timestamp will be used.\n     */\n    stopAction(context?: object, timestampMs?: number): Promise<void>;\n\n    /**\n     * Add a RUM Action.\n     * @param type: The action type (tap, scroll, swipe, back, custom).\n     * @param name: The action name.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the action occurred (in milliseconds). If not provided, current timestamp will be used.\n     */\n    addAction(\n        type: RumActionType,\n        name: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Start tracking a RUM Resource.\n     * @param key: The resource unique key identifier.\n     * @param method: The resource method (GET, POST, …).\n     * @param url: The resource url.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the resource started (in milliseconds). If not provided, current timestamp will be used.\n     */\n    startResource(\n        key: string,\n        method: string,\n        url: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Stop tracking a RUM Resource.\n     * @param key: The resource unique key identifier.\n     * @param statusCode: The resource status code.\n     * @param kind: The resource's kind (xhr, document, image, css, font, …).\n     * @param size: The resource size in bytes. If size is unknown, use -1.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the resource stopped (in milliseconds). If not provided, current timestamp will be used.\n     */\n    stopResource(\n        key: string,\n        statusCode: number,\n        kind: ResourceKind,\n        size?: number,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Add a RUM Error.\n     * @param message: The error message.\n     * @param source: The error source (network, source, console, webview, custom).\n     * @param stacktrace: The error stacktrace.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the error occurred (in milliseconds). If not provided, current timestamp will be used.\n     */\n    addError(\n        message: string,\n        source: ErrorSource,\n        stacktrace: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Adds a specific timing in the active View. The timing duration will be computed as the difference between the time the View was started and the time this function was called.\n     * @param name: The name of the new custom timing attribute. Timings can be nested up to 8 levels deep. Names using more than 8 levels will be sanitized by SDK.\n     */\n    addTiming(name: string): Promise<void>;\n};\n\n/**\n * Describe the type of a RUM Action.\n */\nexport enum RumActionType {\n    /** User tapped on a widget. */\n    TAP = 'TAP',\n    /** User scrolled a view. */\n    SCROLL = 'SCROLL',\n    /** User swiped on a view. */\n    SWIPE = 'SWIPE',\n    /** User pressed hardware back button (Android only). */\n    BACK = 'BACK',\n    /** A custom action. */\n    CUSTOM = 'CUSTOM'\n}\n\nexport type ResourceKind =\n    | 'image'\n    | 'xhr'\n    | 'beacon'\n    | 'css'\n    | 'document'\n    | 'fetch'\n    | 'font'\n    | 'js'\n    | 'media'\n    | 'other'\n    | 'native';\n\nexport enum ErrorSource {\n    NETWORK = 'NETWORK',\n    SOURCE = 'SOURCE',\n    CONSOLE = 'CONSOLE',\n    WEBVIEW = 'WEBVIEW',\n    CUSTOM = 'CUSTOM'\n}\n\n/**\n * Type of instrumentation on the host.\n * - DATADOG: Datadog’s propagator (`x-datadog-*`)\n * - TRACECONTEXT: W3C Trace Context (`traceparent`)\n * - B3: B3 single header (`b3`)\n * - B3MULTI: B3 multiple headers (`X-B3-*`)\n */\nexport enum PropagatorType {\n    DATADOG = 'datadog',\n    TRACECONTEXT = 'tracecontext',\n    B3 = 'b3',\n    B3MULTI = 'b3multi'\n}\n\nexport type FirstPartyHost = {\n    match: string;\n    propagatorTypes: PropagatorType[];\n};\n"]}