{"version":3,"sources":["foundation.tsx"],"names":["timeProvider","TimeProvider","DdTraceWrapper","NativeModules","DdTrace","startSpan","operation","context","timestampMs","now","spanId","nativeTrace","InternalLog","log","SdkVerbosity","DEBUG","finishSpan","id","DdSdk"],"mappings":";;;;;;;;;;;;;AAMA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;AAEA,MAAMA,YAAY,GAAG,IAAIC,0BAAJ,EAArB;;AAEA,MAAMC,cAAN,CAA4C;AAAA;AAAA,yCAECC,2BAAcC,OAFf;AAAA;;AAIxCC,EAAAA,SAAS,CAACC,SAAD,EAAoBC,OAAe,GAAG,EAAtC,EAA0CC,WAAmB,GAAGR,YAAY,CAACS,GAAb,EAAhE,EAAqG;AAC1G,QAAIC,MAAM,GAAG,mDAA4B,MAAK,KAAKC,WAAL,CAAiBN,SAAjB,CAA2BC,SAA3B,EAAsCC,OAAtC,EAA+CC,WAA/C,CAAjC,CAAb;;AACAI,6BAAYC,GAAZ,CAAgB,oBAAqBP,SAArB,GAAiC,KAAjC,GAAyCI,MAAzD,EAAiEI,2BAAaC,KAA9E;;AACA,WAAOL,MAAP;AACH;;AAEDM,EAAAA,UAAU,CAACN,MAAD,EAAiBH,OAAe,GAAG,EAAnC,EAAuCC,WAAmB,GAAGR,YAAY,CAACS,GAAb,EAA7D,EAAgG;AACtGG,6BAAYC,GAAZ,CAAgB,qBAAsBH,MAAtC,EAA8CI,2BAAaC,KAA3D;;AACA,WAAO,8CAAwBE,EAAD,IAAS,KAAKN,WAAL,CAAiBK,UAAjB,CAA4BC,EAA5B,EAAgCV,OAAhC,EAAyCC,WAAzC,CAAhC,EAAuFE,MAAvF,CAAP;AACH;;AAbuC;;AAgB5C,MAAMQ,KAAsB,GAAGf,2BAAce,KAA7C;;AACA,MAAMd,OAAoB,GAAG,IAAIF,cAAJ,EAA7B","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport { NativeModules } from 'react-native';\nimport { DdSdkConfiguration, DdTraceType } from './types';\nimport {InternalLog} from \"./InternalLog\"\nimport {SdkVerbosity} from \"./SdkVerbosity\";\nimport {TimeProvider} from \"./TimeProvider\";\nimport type { DdNativeSdkType, DdNativeTraceType } from './nativeModulesTypes';\nimport { bufferNativeCallReturningId, bufferNativeCallWithId } from './sdk/DatadogProvider/Buffer/bufferNativeCall';\n\nconst timeProvider = new TimeProvider();\n\nclass DdTraceWrapper implements DdTraceType {\n\n    private nativeTrace: DdNativeTraceType = NativeModules.DdTrace;\n\n    startSpan(operation: string, context: object = {}, timestampMs: number = timeProvider.now()): Promise<string> {\n        let spanId = bufferNativeCallReturningId(() =>this.nativeTrace.startSpan(operation, context, timestampMs));\n        InternalLog.log(\"Starting span “\" +  operation + \"” #\" + spanId, SdkVerbosity.DEBUG);\n        return spanId\n    }\n\n    finishSpan(spanId: string, context: object = {}, timestampMs: number = timeProvider.now()): Promise<void> {\n        InternalLog.log(\"Finishing span #\" +  spanId, SdkVerbosity.DEBUG);\n        return bufferNativeCallWithId((id) =>  this.nativeTrace.finishSpan(id, context, timestampMs), spanId);\n    }\n}\n\nconst DdSdk: DdNativeSdkType = NativeModules.DdSdk;\nconst DdTrace: DdTraceType = new DdTraceWrapper();\n\nexport { DdSdkConfiguration, DdSdk, DdTrace };\n"]}