{"version":3,"sources":["DdSdkReactNative.tsx"],"names":["DdSdkReactNative","initialize","configuration","initializeNativeSDK","initializationModeForTelemetry","enableFeatures","_initializeFromDatadogProvider","initializationMode","InitializationMode","SYNC","ASYNC","InteractionManager","runAfterInteractions","DdSdkReactNativeConfiguration","_enableFeaturesFromDatadogProvider","features","setAttributes","attributes","InternalLog","log","JSON","stringify","SdkVerbosity","DEBUG","DdSdk","AttributesSingleton","getInstance","setUser","user","UserInfoSingleton","setUserInfo","setTrackingConsent","consent","wasAutoInstrumented","WARN","trackInteractions","DdRumUserInteractionTracking","startTracking","trackResources","DdRumResourceTracking","tracingSamplingRate","resourceTracingSamplingRate","firstPartyHosts","trackErrors","DdRumErrorTracking","logEventMapper","DdLogs","registerLogEventMapper","errorEventMapper","DdRum","registerErrorEventMapper","resourceEventMapper","registerResourceEventMapper","actionEventMapper","registerActionEventMapper","params","wasInitialized","__DEV__","telemetryDebug","Promise","resolve","verbosity","buildConfiguration","DdSdkConfiguration","clientToken","env","applicationId","nativeCrashReportEnabled","nativeLongTaskThresholdMs","longTaskThresholdMs","sampleRate","undefined","sessionSamplingRate","site","trackingConsent","additionalConfig","telemetrySampleRate","vitalsUpdateFrequency","initializationType","trackNetworkRequests","INFO","BufferSingleton","onInitialization","DD_SOURCE_KEY","DD_SDK_VERSION","sdkVersion","DD_NATIVE_VIEW_TRACKING_KEY","nativeViewTracking","DD_NATIVE_INTERACTION_TRACKING_KEY","nativeInteractionTracking","DD_SDK_VERBOSITY_KEY","proxyConfig","DD_PROXY_TYPE_KEY","type","DD_PROXY_ADDRESS_KEY","address","DD_PROXY_PORT_KEY","port","username","password","ProxyType","SOCKS","console","warn","DD_PROXY_USERNAME_KEY","DD_PROXY_PASSWORD_KEY","serviceName","DD_SERVICE_NAME","version","DD_VERSION","versionSuffix","DD_VERSION_SUFFIX"],"mappings":"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","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport { InteractionManager } from 'react-native';\n\nimport {\n    DdSdkReactNativeConfiguration,\n    buildConfigurationFromPartialConfiguration,\n    addDefaultValuesToAutoInstrumentationConfiguration,\n    InitializationMode,\n    formatFirstPartyHosts\n} from './DdSdkReactNativeConfiguration';\nimport type {\n    AutoInstrumentationParameters,\n    DatadogProviderConfiguration,\n    PartialInitializationConfiguration,\n    AutoInstrumentationConfiguration,\n    InitializationModeForTelemetry\n} from './DdSdkReactNativeConfiguration';\nimport { InternalLog } from './InternalLog';\nimport { ProxyType } from './ProxyConfiguration';\nimport { SdkVerbosity } from './SdkVerbosity';\nimport type { TrackingConsent } from './TrackingConsent';\nimport { DdSdk } from './foundation';\nimport { DdLogs } from './logs/DdLogs';\nimport { adaptLongTaskThreshold } from './longTasksUtils';\nimport { DdRum } from './rum/DdRum';\nimport { DdRumErrorTracking } from './rum/instrumentation/DdRumErrorTracking';\nimport { DdRumUserInteractionTracking } from './rum/instrumentation/interactionTracking/DdRumUserInteractionTracking';\nimport { DdRumResourceTracking } from './rum/instrumentation/resourceTracking/DdRumResourceTracking';\nimport { AttributesSingleton } from './sdk/AttributesSingleton/AttributesSingleton';\nimport type { Attributes } from './sdk/AttributesSingleton/types';\nimport { BufferSingleton } from './sdk/DatadogProvider/Buffer/BufferSingleton';\nimport { UserInfoSingleton } from './sdk/UserInfoSingleton/UserInfoSingleton';\nimport type { UserInfo } from './sdk/UserInfoSingleton/types';\nimport { DdSdkConfiguration } from './types';\nimport { version as sdkVersion } from './version';\n\n/**\n * This class initializes the Datadog SDK, and sets up communication with the server.\n */\nexport class DdSdkReactNative {\n    private static readonly DD_SOURCE_KEY = '_dd.source';\n    private static readonly DD_SDK_VERSION = '_dd.sdk_version';\n    private static readonly DD_SERVICE_NAME = '_dd.service_name';\n    private static readonly DD_SDK_VERBOSITY_KEY = '_dd.sdk_verbosity';\n    private static readonly DD_NATIVE_VIEW_TRACKING_KEY =\n        '_dd.native_view_tracking';\n    private static readonly DD_NATIVE_INTERACTION_TRACKING_KEY =\n        '_dd.native_interaction_tracking';\n    private static readonly DD_VERSION = '_dd.version';\n    private static readonly DD_VERSION_SUFFIX = '_dd.version_suffix';\n\n    // Proxy\n    private static readonly DD_PROXY_TYPE_KEY = '_dd.proxy.type';\n    private static readonly DD_PROXY_ADDRESS_KEY = '_dd.proxy.address';\n    private static readonly DD_PROXY_PORT_KEY = '_dd.proxy.port';\n    private static readonly DD_PROXY_USERNAME_KEY = '_dd.proxy.username';\n    private static readonly DD_PROXY_PASSWORD_KEY = '_dd.proxy.password';\n\n    private static wasInitialized = false;\n    private static wasAutoInstrumented = false;\n    private static features?: AutoInstrumentationConfiguration;\n\n    /**\n     * Initializes the Datadog SDK.\n     * @param configuration the configuration for the SDK library\n     * @returns a Promise.\n     */\n    static async initialize(\n        configuration: DdSdkReactNativeConfiguration\n    ): Promise<void> {\n        await DdSdkReactNative.initializeNativeSDK(configuration, {\n            initializationModeForTelemetry: 'LEGACY'\n        });\n        DdSdkReactNative.enableFeatures(configuration);\n    }\n\n    private static initializeNativeSDK = async (\n        configuration: DdSdkReactNativeConfiguration,\n        params: {\n            initializationModeForTelemetry: InitializationModeForTelemetry;\n        }\n    ): Promise<void> => {\n        if (DdSdkReactNative.wasInitialized) {\n            InternalLog.log(\n                \"Can't initialize Datadog, SDK was already initialized\",\n                SdkVerbosity.WARN\n            );\n            if (!__DEV__) {\n                DdSdk.telemetryDebug(\n                    'RN SDK was already initialized in javascript'\n                );\n            }\n            return new Promise(resolve => resolve());\n        }\n\n        InternalLog.verbosity = configuration.verbosity;\n\n        DdSdkReactNative.buildConfiguration(configuration);\n\n        await DdSdk.initialize(\n            new DdSdkConfiguration(\n                configuration.clientToken,\n                configuration.env,\n                configuration.applicationId,\n                configuration.nativeCrashReportEnabled,\n                adaptLongTaskThreshold(configuration.nativeLongTaskThresholdMs),\n                adaptLongTaskThreshold(configuration.longTaskThresholdMs),\n                configuration.sampleRate === undefined\n                    ? configuration.sessionSamplingRate\n                    : configuration.sampleRate,\n                configuration.site,\n                configuration.trackingConsent,\n                configuration.additionalConfig,\n                configuration.telemetrySampleRate,\n                configuration.vitalsUpdateFrequency,\n                {\n                    initializationType: params.initializationModeForTelemetry,\n                    trackErrors: configuration.trackErrors,\n                    trackInteractions: configuration.trackInteractions,\n                    trackNetworkRequests: configuration.trackResources\n                }\n            )\n        );\n        InternalLog.log('Datadog SDK was initialized', SdkVerbosity.INFO);\n        DdSdkReactNative.wasInitialized = true;\n        BufferSingleton.onInitialization();\n    };\n\n    /**\n     * FOR INTERNAL USE ONLY.\n     */\n    static async _initializeFromDatadogProvider(\n        configuration: DatadogProviderConfiguration\n    ): Promise<void> {\n        DdSdkReactNative.enableFeatures(configuration);\n        if (configuration.initializationMode === InitializationMode.SYNC) {\n            return DdSdkReactNative.initializeNativeSDK(configuration, {\n                initializationModeForTelemetry: 'SYNC'\n            });\n        }\n        if (configuration.initializationMode === InitializationMode.ASYNC) {\n            return InteractionManager.runAfterInteractions(() => {\n                return DdSdkReactNative.initializeNativeSDK(configuration, {\n                    initializationModeForTelemetry: 'ASYNC'\n                });\n            });\n        }\n        // TODO: Remove when DdSdkReactNativeConfiguration is deprecated\n        if (configuration instanceof DdSdkReactNativeConfiguration) {\n            return DdSdkReactNative.initializeNativeSDK(configuration, {\n                initializationModeForTelemetry: 'SYNC'\n            });\n        }\n    }\n\n    /**\n     * FOR INTERNAL USE ONLY.\n     */\n    static async _enableFeaturesFromDatadogProvider(\n        features: AutoInstrumentationConfiguration\n    ): Promise<void> {\n        DdSdkReactNative.features = features;\n        DdSdkReactNative.enableFeatures(\n            addDefaultValuesToAutoInstrumentationConfiguration(features)\n        );\n    }\n\n    /**\n     * FOR INTERNAL USE ONLY.\n     */\n    static _initializeFromDatadogProviderWithConfigurationAsync = async (\n        configuration: PartialInitializationConfiguration\n    ): Promise<void> => {\n        if (!DdSdkReactNative.features) {\n            InternalLog.log(\n                \"Can't initialize Datadog, make sure the DatadogProvider component is mounted before calling this function\",\n                SdkVerbosity.WARN\n            );\n            return new Promise(resolve => resolve());\n        }\n\n        return DdSdkReactNative.initializeNativeSDK(\n            buildConfigurationFromPartialConfiguration(\n                DdSdkReactNative.features,\n                configuration\n            ),\n            { initializationModeForTelemetry: 'PARTIAL' }\n        );\n    };\n\n    /**\n     * Adds a set of attributes to the global context attached with all future Logs, Spans and RUM events.\n     * To remove an attribute, set it to `undefined` in a call to `setAttributes`.\n     * @param attributes: The global context attributes.\n     * @returns a Promise.\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    static async setAttributes(attributes: Attributes): Promise<void> {\n        InternalLog.log(\n            `Setting attributes ${JSON.stringify(attributes)}`,\n            SdkVerbosity.DEBUG\n        );\n        await DdSdk.setAttributes(attributes);\n        AttributesSingleton.getInstance().setAttributes(attributes);\n    }\n\n    /**\n     * Set the user information.\n     * @param user: The user object (use builtin attributes: 'id', 'email', 'name', and/or any custom attribute).\n     * @returns a Promise.\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    static async setUser(user: UserInfo): Promise<void> {\n        InternalLog.log(\n            `Setting user ${JSON.stringify(user)}`,\n            SdkVerbosity.DEBUG\n        );\n        await DdSdk.setUser(user);\n        UserInfoSingleton.getInstance().setUserInfo(user);\n    }\n\n    /**\n     * Set the tracking consent regarding the data collection.\n     * @param trackingConsent: One of TrackingConsent values.\n     * @returns a Promise.\n     */\n    static setTrackingConsent(consent: TrackingConsent): Promise<void> {\n        InternalLog.log(`Setting consent ${consent}`, SdkVerbosity.DEBUG);\n        return DdSdk.setTrackingConsent(consent);\n    }\n\n    private static buildConfiguration = (\n        configuration: DdSdkReactNativeConfiguration\n    ) => {\n        configuration.additionalConfig[DdSdkReactNative.DD_SOURCE_KEY] =\n            'react-native';\n        configuration.additionalConfig[\n            DdSdkReactNative.DD_SDK_VERSION\n        ] = sdkVersion;\n        configuration.additionalConfig[\n            DdSdkReactNative.DD_NATIVE_VIEW_TRACKING_KEY\n        ] = configuration.nativeViewTracking;\n        configuration.additionalConfig[\n            DdSdkReactNative.DD_NATIVE_INTERACTION_TRACKING_KEY\n        ] = configuration.nativeInteractionTracking;\n\n        if (configuration.verbosity) {\n            configuration.additionalConfig[\n                DdSdkReactNative.DD_SDK_VERBOSITY_KEY\n            ] = configuration.verbosity;\n        }\n\n        if (configuration.proxyConfig) {\n            const additionalConfig = configuration.additionalConfig;\n            const proxyConfig = configuration.proxyConfig;\n\n            additionalConfig[DdSdkReactNative.DD_PROXY_TYPE_KEY] =\n                proxyConfig.type;\n            additionalConfig[DdSdkReactNative.DD_PROXY_ADDRESS_KEY] =\n                proxyConfig.address;\n            additionalConfig[DdSdkReactNative.DD_PROXY_PORT_KEY] =\n                proxyConfig.port;\n            if (proxyConfig.username && proxyConfig.password) {\n                if (proxyConfig.type === ProxyType.SOCKS) {\n                    console.warn(\n                        \"SOCKS proxy configuration doesn't support Basic authentication.\"\n                    );\n                } else {\n                    additionalConfig[DdSdkReactNative.DD_PROXY_USERNAME_KEY] =\n                        proxyConfig.username;\n                    additionalConfig[DdSdkReactNative.DD_PROXY_PASSWORD_KEY] =\n                        proxyConfig.password;\n                }\n            }\n        }\n\n        if (configuration.serviceName) {\n            configuration.additionalConfig[DdSdkReactNative.DD_SERVICE_NAME] =\n                configuration.serviceName;\n        }\n\n        if (configuration.version) {\n            configuration.additionalConfig[DdSdkReactNative.DD_VERSION] = `${\n                configuration.version\n            }${\n                configuration.versionSuffix\n                    ? `-${configuration.versionSuffix}`\n                    : ''\n            }`;\n        }\n\n        // If both version and version suffix are provided, we merge them into the version field.\n        // To avoid adding it in again the native part, we only set it if the version isn't set.\n        if (configuration.versionSuffix && !configuration.version) {\n            configuration.additionalConfig[\n                DdSdkReactNative.DD_VERSION_SUFFIX\n            ] = `-${configuration.versionSuffix}`;\n        }\n\n        configuration.additionalConfig[\n            '_dd.first_party_hosts'\n        ] = formatFirstPartyHosts(configuration.firstPartyHosts);\n    };\n\n    private static enableFeatures(\n        configuration: AutoInstrumentationParameters\n    ) {\n        if (DdSdkReactNative.wasAutoInstrumented) {\n            InternalLog.log(\n                \"Can't auto instrument Datadog, SDK was already instrumented\",\n                SdkVerbosity.WARN\n            );\n            return;\n        }\n        if (configuration.trackInteractions) {\n            DdRumUserInteractionTracking.startTracking();\n        }\n\n        if (configuration.trackResources) {\n            DdRumResourceTracking.startTracking({\n                tracingSamplingRate: configuration.resourceTracingSamplingRate,\n                firstPartyHosts: formatFirstPartyHosts(\n                    configuration.firstPartyHosts\n                )\n            });\n        }\n\n        if (configuration.trackErrors) {\n            DdRumErrorTracking.startTracking();\n        }\n\n        if (configuration.logEventMapper) {\n            DdLogs.registerLogEventMapper(configuration.logEventMapper);\n        }\n\n        if (configuration.errorEventMapper) {\n            DdRum.registerErrorEventMapper(configuration.errorEventMapper);\n        }\n\n        if (configuration.resourceEventMapper) {\n            DdRum.registerResourceEventMapper(\n                configuration.resourceEventMapper\n            );\n        }\n\n        if (configuration.actionEventMapper) {\n            DdRum.registerActionEventMapper(configuration.actionEventMapper);\n        }\n\n        DdSdkReactNative.wasAutoInstrumented = true;\n    }\n}\n"]}