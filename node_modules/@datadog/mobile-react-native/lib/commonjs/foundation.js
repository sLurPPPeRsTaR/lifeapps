"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "DdSdkConfiguration", {
  enumerable: true,
  get: function () {
    return _types.DdSdkConfiguration;
  }
});
exports.DdTrace = exports.DdSdk = void 0;

var _reactNative = require("react-native");

var _types = require("./types");

var _InternalLog = require("./InternalLog");

var _SdkVerbosity = require("./SdkVerbosity");

var _TimeProvider = require("./TimeProvider");

var _bufferNativeCall = require("./sdk/DatadogProvider/Buffer/bufferNativeCall");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const timeProvider = new _TimeProvider.TimeProvider();

class DdTraceWrapper {
  constructor() {
    _defineProperty(this, "nativeTrace", _reactNative.NativeModules.DdTrace);
  }

  startSpan(operation, context = {}, timestampMs = timeProvider.now()) {
    let spanId = (0, _bufferNativeCall.bufferNativeCallReturningId)(() => this.nativeTrace.startSpan(operation, context, timestampMs));

    _InternalLog.InternalLog.log("Starting span “" + operation + "” #" + spanId, _SdkVerbosity.SdkVerbosity.DEBUG);

    return spanId;
  }

  finishSpan(spanId, context = {}, timestampMs = timeProvider.now()) {
    _InternalLog.InternalLog.log("Finishing span #" + spanId, _SdkVerbosity.SdkVerbosity.DEBUG);

    return (0, _bufferNativeCall.bufferNativeCallWithId)(id => this.nativeTrace.finishSpan(id, context, timestampMs), spanId);
  }

}

const DdSdk = _reactNative.NativeModules.DdSdk;
exports.DdSdk = DdSdk;
const DdTrace = new DdTraceWrapper();
exports.DdTrace = DdTrace;
//# sourceMappingURL=foundation.js.map