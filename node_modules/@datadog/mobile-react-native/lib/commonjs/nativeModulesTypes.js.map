{"version":3,"sources":["nativeModulesTypes.ts"],"names":["DdNativeSdkConfiguration","constructor","clientToken","env","applicationId","nativeCrashReportEnabled","sampleRate","site","trackingConsent","additionalConfig"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACO,MAAMA,wBAAN,CAA+B;AAClCC,EAAAA,WAAW,CACEC,WADF,EAEEC,GAFF,EAGEC,aAHF,EAIEC,wBAJF,EAKEC,UALF,EAMEC,IANF,EAOEC,eAPF,EAQEC,gBARF,EAST;AAAA,SARWP,WAQX,GARWA,WAQX;AAAA,SAPWC,GAOX,GAPWA,GAOX;AAAA,SANWC,aAMX,GANWA,aAMX;AAAA,SALWC,wBAKX,GALWA,wBAKX;AAAA,SAJWC,UAIX,GAJWA,UAIX;AAAA,SAHWC,IAGX,GAHWA,IAGX;AAAA,SAFWC,eAEX,GAFWA,eAEX;AAAA,SADWC,gBACX,GADWA,gBACX;AAAE;;AAV8B;AAatC;AACA;AACA","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\n/**\n * A configuration object to initialize Datadog's features.\n */\nexport class DdNativeSdkConfiguration {\n    constructor(\n        readonly clientToken: string,\n        readonly env: string,\n        readonly applicationId: string,\n        readonly nativeCrashReportEnabled: boolean,\n        readonly sampleRate: number,\n        readonly site: string,\n        readonly trackingConsent: string,\n        readonly additionalConfig: object\n    ) {}\n}\n\n/**\n * The entry point to initialize Datadog's features.\n */\nexport type DdNativeSdkType = {\n    /**\n     * Initializes Datadog's features.\n     * @param configuration: The configuration to use.\n     */\n    initialize(configuration: DdNativeSdkConfiguration): Promise<void>;\n\n    /**\n     * Sets the global context (set of attributes) attached with all future Logs, Spans and RUM events.\n     * @param attributes: The global context attributes.\n     */\n    setAttributes(attributes: object): Promise<void>;\n\n    /**\n     * Set the user information.\n     * @param user: The user object (use builtin attributes: 'id', 'email', 'name', and/or any custom attribute).\n     */\n    setUser(user: object): Promise<object>;\n\n    /**\n     * Set the tracking consent regarding the data collection.\n     * @param trackingConsent: Consent, which can take one of the following values: 'pending', 'granted', 'not_granted'.\n     */\n    setTrackingConsent(trackingConsent: string): Promise<void>;\n\n    /**\n     * Sends internal telemetry debug message\n     * @param message debug message\n     */\n    telemetryDebug(message: string): Promise<void>;\n\n    /**\n     * Sends internal telemetry error\n     * @param message error message\n     * @param stack error stack\n     * @param kind error kind\n     */\n    telemetryError(message: string, stack: string, kind: string): Promise<void>;\n};\n\n/**\n * The entry point to use Datadog's Logs feature.\n */\nexport type DdNativeLogsType = {\n    /**\n     * Send a log with level debug.\n     * @param message: The message to send.\n     * @param context: The additional context to send.\n     */\n    debug(message: string, context?: object): Promise<void>;\n\n    /**\n     * Send a log with level info.\n     * @param message: The message to send.\n     * @param context: The additional context to send.\n     */\n    info(message: string, context?: object): Promise<void>;\n\n    /**\n     * Send a log with level warn.\n     * @param message: The message to send.\n     * @param context: The additional context to send.\n     */\n    warn(message: string, context?: object): Promise<void>;\n\n    /**\n     * Send a log with level error.\n     * @param message: The message to send.\n     * @param context: The additional context to send.\n     */\n    error(message: string, context?: object): Promise<void>;\n};\n\n/**\n * The entry point to use Datadog's Trace feature.\n */\nexport type DdNativeTraceType = {\n    /**\n     * Start a span, and returns a unique identifier for the span.\n     * @param operation: The operation name of the span.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the operation started (in milliseconds). If not provided, current timestamp will be used.\n     */\n    startSpan(\n        operation: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<string>;\n\n    /**\n     * Finish a started span.\n     * @param spanId: The unique identifier of the span.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the operation stopped (in milliseconds). If not provided, current timestamp will be used.\n     */\n    finishSpan(\n        spanId: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n};\n\n/**\n * The entry point to use Datadog's RUM feature.\n */\nexport type DdNativeRumType = {\n    /**\n     * Start tracking a RUM View.\n     * @param key: The view unique key identifier.\n     * @param name: The view name.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the view started (in milliseconds). If not provided, current timestamp will be used.\n     */\n    startView(\n        key: string,\n        name: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Stop tracking a RUM View.\n     * @param key: The view unique key identifier.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the view stopped (in milliseconds). If not provided, current timestamp will be used.\n     */\n    stopView(\n        key: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Start tracking a RUM Action.\n     * @param type: The action type (tap, scroll, swipe, back, custom).\n     * @param name: The action name.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the action started (in milliseconds). If not provided, current timestamp will be used.\n     */\n    startAction(\n        type: ActionType,\n        name: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Stop tracking the ongoing RUM Action.\n     * @param type: The action type (tap, scroll, swipe, back, custom).\n     * @param name: The action name.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the action stopped (in milliseconds). If not provided, current timestamp will be used.\n     */\n    stopAction(\n        type: ActionType,\n        name: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Add a RUM Action.\n     * @param type: The action type (tap, scroll, swipe, back, custom).\n     * @param name: The action name.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the action occurred (in milliseconds). If not provided, current timestamp will be used.\n     */\n    addAction(\n        type: ActionType,\n        name: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Start tracking a RUM Resource.\n     * @param key: The resource unique key identifier.\n     * @param method: The resource method (GET, POST, …).\n     * @param url: The resource url.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the resource started (in milliseconds). If not provided, current timestamp will be used.\n     */\n    startResource(\n        key: string,\n        method: string,\n        url: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Stop tracking a RUM Resource.\n     * @param key: The resource unique key identifier.\n     * @param statusCode: The resource status code.\n     * @param kind: The resource's kind (xhr, document, image, css, font, …).\n     * @param size: The resource size in bytes. If size is unknown, use -1.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the resource stopped (in milliseconds). If not provided, current timestamp will be used.\n     */\n    stopResource(\n        key: string,\n        statusCode: number,\n        kind: ResourceKind,\n        size?: number,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Add a RUM Error.\n     * @param message: The error message.\n     * @param source: The error source (network, source, console, webview, custom).\n     * @param stacktrace: The error stacktrace.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the error occurred (in milliseconds). If not provided, current timestamp will be used.\n     */\n    addError(\n        message: string,\n        source: ErrorSource,\n        stacktrace: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n\n    /**\n     * Adds a specific timing in the active View. The timing duration will be computed as the difference between the time the View was started and the time this function was called.\n     * @param name: The name of the new custom timing attribute. Timings can be nested up to 8 levels deep. Names using more than 8 levels will be sanitized by SDK.\n     */\n    addTiming(name: string): Promise<void>;\n};\n\ntype ActionType = 'TAP' | 'SCROLL' | 'SWIPE' | 'BACK' | 'CUSTOM';\n\ntype ResourceKind =\n    | 'image'\n    | 'xhr'\n    | 'beacon'\n    | 'css'\n    | 'document'\n    | 'fetch'\n    | 'font'\n    | 'js'\n    | 'media'\n    | 'other'\n    | 'native';\n\ntype ErrorSource = 'NETWORK' | 'SOURCE' | 'CONSOLE' | 'WEBVIEW' | 'CUSTOM';\n"]}