function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2016-Present Datadog, Inc.
 */

/**
 * A Timestamp structure holding the
 */

/**
 * Simple class providing timestamps in milliseconds.
 * If available, it will use the `performance.now()` method, and will fallback on `Date.now()` otherwise.
 */
export class TimeProvider {
  /** Keeps an average offset between the unix time and the provided timestamp. */
  constructor() {
    _defineProperty(this, "canUsePerformanceNow", // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    global.performance && typeof performance.now === 'function');

    _defineProperty(this, "baseOffset", void 0);

    const timestamp = this.getTimestamp();

    if (timestamp.react_native == null) {
      this.baseOffset = 0;
    } else {
      this.baseOffset = timestamp.unix - timestamp.react_native;
    }
  }

  getTimestamp() {
    return {
      unix: Date.now(),
      react_native: this.performanceNow()
    };
  }

  now() {
    const timestamp = this.getTimestamp();

    if (timestamp.react_native == null) {
      return timestamp.unix;
    } else {
      return this.baseOffset + timestamp.react_native;
    }
  }

  performanceNow() {
    if (this.canUsePerformanceNow) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      return performance.now();
    }

    return null;
  }

}
//# sourceMappingURL=TimeProvider.js.map