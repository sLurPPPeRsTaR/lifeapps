{"version":3,"sources":["types.tsx"],"names":["DdSdkConfiguration","constructor","clientToken","env","applicationId","nativeCrashReportEnabled","nativeLongTaskThresholdMs","longTaskThresholdMs","sampleRate","site","trackingConsent","additionalConfig","telemetrySampleRate","vitalsUpdateFrequency","configurationForTelemetry"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,MAAMA,kBAAN,CAAyB;AAC5BC,EAAAA,WAAW,CACEC,WADF,EAEEC,GAFF,EAGEC,aAHF,EAIEC,wBAJF,EAKEC,yBALF,EAMEC,mBANF,EAOEC,UAPF,EAQEC,IARF,EASEC,eATF,EAUEC,gBAVF,EAWEC,mBAXF,EAYEC,qBAZF,EAaEC,yBAbF,EAmBT;AAAA,SAlBWZ,WAkBX,GAlBWA,WAkBX;AAAA,SAjBWC,GAiBX,GAjBWA,GAiBX;AAAA,SAhBWC,aAgBX,GAhBWA,aAgBX;AAAA,SAfWC,wBAeX,GAfWA,wBAeX;AAAA,SAdWC,yBAcX,GAdWA,yBAcX;AAAA,SAbWC,mBAaX,GAbWA,mBAaX;AAAA,SAZWC,UAYX,GAZWA,UAYX;AAAA,SAXWC,IAWX,GAXWA,IAWX;AAAA,SAVWC,eAUX,GAVWA,eAUX;AAAA,SATWC,gBASX,GATWA,gBASX;AAAA,SARWC,mBAQX,GARWA,mBAQX;AAAA,SAPWC,qBAOX,GAPWA,qBAOX;AAAA,SANWC,yBAMX,GANWA,yBAMX;AAAE;;AApBwB;AAuBhC;AACA;AACA","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\n/**\n * A configuration object to initialize Datadog's features.\n */\nexport class DdSdkConfiguration {\n    constructor(\n        readonly clientToken: string,\n        readonly env: string,\n        readonly applicationId: string,\n        readonly nativeCrashReportEnabled: boolean,\n        readonly nativeLongTaskThresholdMs: number,\n        readonly longTaskThresholdMs: number,\n        readonly sampleRate: number,\n        readonly site: string,\n        readonly trackingConsent: string,\n        readonly additionalConfig: object,\n        readonly telemetrySampleRate: number,\n        readonly vitalsUpdateFrequency: string,\n        readonly configurationForTelemetry: {\n            initializationType: string;\n            trackErrors: boolean;\n            trackInteractions: boolean;\n            trackNetworkRequests: boolean;\n        }\n    ) {}\n}\n\n/**\n * The entry point to initialize Datadog's features.\n */\nexport type DdSdkType = {\n    /**\n     * Initializes Datadog's features.\n     * @param configuration: The configuration to use.\n     */\n    initialize(configuration: DdSdkConfiguration): Promise<void>;\n\n    /**\n     * Sets the global context (set of attributes) attached with all future Logs, Spans and RUM events.\n     * @param attributes: The global context attributes.\n     */\n    setAttributes(attributes: object): Promise<void>;\n\n    /**\n     * Set the user information.\n     * @param user: The user object (use builtin attributes: 'id', 'email', 'name', and/or any custom attribute).\n     */\n    setUser(user: object): Promise<void>;\n\n    /**\n     * Set the tracking consent regarding the data collection.\n     * @param trackingConsent: Consent, which can take one of the following values: 'pending', 'granted', 'not_granted'.\n     */\n    setTrackingConsent(trackingConsent: string): Promise<void>;\n};\n\n/**\n * The entry point to use Datadog's Trace feature.\n */\nexport type DdTraceType = {\n    /**\n     * Start a span, and returns a unique identifier for the span.\n     * @param operation: The operation name of the span.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the operation started (in milliseconds). If not provided, current timestamp will be used.\n     */\n    startSpan(\n        operation: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<string>;\n\n    /**\n     * Finish a started span.\n     * @param spanId: The unique identifier of the span.\n     * @param context: The additional context to send.\n     * @param timestampMs: The timestamp when the operation stopped (in milliseconds). If not provided, current timestamp will be used.\n     */\n    finishSpan(\n        spanId: string,\n        context?: object,\n        timestampMs?: number\n    ): Promise<void>;\n};\n"]}