function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2016-Present Datadog, Inc.
 */
import { DdRum } from '../../../../DdRum';
import { createTimings } from './resourceTiming';
export class ResourceReporter {
  constructor(resourceMappers) {
    _defineProperty(this, "mappers", void 0);

    _defineProperty(this, "reportResource", resource => {
      let modifiedResource = resource;

      for (const mapper of this.mappers) {
        modifiedResource = mapper(resource);

        if (modifiedResource === null) {
          return;
        }
      }

      reportResource(modifiedResource);
    });

    this.mappers = resourceMappers;
  }

}

const formatResourceStartContext = tracingAttributes => {
  return tracingAttributes.samplingPriorityHeader === '0' ? undefined : {
    '_dd.span_id': tracingAttributes.spanId.toString(10),
    '_dd.trace_id': tracingAttributes.traceId.toString(10),
    '_dd.rule_psr': tracingAttributes.rulePsr
  };
};

const formatResourceStopContext = timings => {
  return {
    '_dd.resource_timings': timings.responseStartTime !== undefined ? createTimings(timings.startTime, timings.responseStartTime, timings.stopTime) : null
  };
};

const reportResource = async resource => {
  await DdRum.startResource(resource.key, resource.request.method, resource.request.url, formatResourceStartContext(resource.tracingAttributes), resource.timings.startTime);
  DdRum.stopResource(resource.key, resource.response.statusCode, resource.request.kind, resource.response.size, formatResourceStopContext(resource.timings), resource.timings.stopTime, resource.resourceContext);
};
//# sourceMappingURL=ResourceReporter.js.map