{"version":3,"sources":["responseSize.ts"],"names":["InternalLog","SdkVerbosity","MISSING_RESOURCE_SIZE","RESOURCE_SIZE_ERROR_MESSAGE","byteLength","str","unescape","encodeURI","length","getResponseContentLengthFromHeader","xhr","contentLengthHeader","parseInt","getResponseHeader","isNaN","calculateResponseSize","response","size","responseType","JSON","stringify","e","log","ERROR"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,QAA4B,yBAA5B;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,MAAMC,qBAAqB,GAAG,CAAC,CAA/B;AACA,OAAO,MAAMC,2BAA2B,GACpC,wDADG;;AAGP,SAASC,UAAT,CAAoBC,GAApB,EAAyC;AACrC;AACA;AACA,SAAOC,QAAQ,CAACC,SAAS,CAACF,GAAD,CAAV,CAAR,CAAyBG,MAAhC;AACH;;AAED,SAASC,kCAAT,CACIC,GADJ,EAEiB;AAAA;;AACb,QAAMC,mBAAmB,GAAGC,QAAQ,0BAChCF,GAAG,CAACG,iBAAJ,CAAsB,gBAAtB,CADgC,yEACW,EADX,EAEhC,EAFgC,CAApC;;AAIA,MAAI,CAACC,KAAK,CAACH,mBAAD,CAAV,EAAiC;AAC7B,WAAOA,mBAAP;AACH;;AACD,SAAO,IAAP;AACH;;AAED,OAAO,SAASI,qBAAT,CAA+BL,GAA/B,EAA4D;AAC/D,QAAMC,mBAAmB,GAAGF,kCAAkC,CAACC,GAAD,CAA9D;;AACA,MAAIC,mBAAmB,IAAI,IAA3B,EAAiC;AAC7B,WAAOA,mBAAP;AACH;;AAED,QAAMK,QAAQ,GAAGN,GAAG,CAACM,QAArB;;AACA,MAAI,CAACA,QAAL,EAAe;AACX,WAAOd,qBAAP;AACH;;AAED,MAAIe,IAAJ;;AACA,MAAI;AACA,YAAQP,GAAG,CAACQ,YAAZ;AACI,WAAK,EAAL;AACA,WAAK,MAAL;AACI;AACAD,QAAAA,IAAI,GAAGb,UAAU,CAACY,QAAD,CAAjB;AACA;;AACJ,WAAK,MAAL;AACIC,QAAAA,IAAI,GAAGD,QAAQ,CAACC,IAAhB;AACA;;AACJ,WAAK,aAAL;AACIA,QAAAA,IAAI,GAAGD,QAAQ,CAACZ,UAAhB;AACA;;AACJ,WAAK,UAAL;AACI;AACA;AACA;;AACJ,WAAK,MAAL;AACI;AACA;AACA;AACA;AACAa,QAAAA,IAAI,GAAGb,UAAU,CAACe,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAD,CAAjB;AACA;;AACJ;AACI;AAxBR;AA0BH,GA3BD,CA2BE,OAAOK,CAAP,EAAU;AACRrB,IAAAA,WAAW,CAACsB,GAAZ,CACK,GAAEnB,2BAA4B,GAAEkB,CAAE,EADvC,EAEIpB,YAAY,CAACsB,KAFjB;AAIH;;AAED,MAAI,OAAON,IAAP,KAAgB,QAApB,EAA8B;AAC1B,WAAOf,qBAAP;AACH;;AACD,SAAOe,IAAP;AACH","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport { InternalLog } from '../../../../InternalLog';\nimport { SdkVerbosity } from '../../../../SdkVerbosity';\n\nconst MISSING_RESOURCE_SIZE = -1;\nexport const RESOURCE_SIZE_ERROR_MESSAGE =\n    \"Couldn't get resource size, because an error occured: \";\n\nfunction byteLength(str: string): number {\n    // This is a weird trick, but it works.\n    // Output is the same as TextEncoder.encode(...).length\n    return unescape(encodeURI(str)).length;\n}\n\nfunction getResponseContentLengthFromHeader(\n    xhr: XMLHttpRequest\n): number | null {\n    const contentLengthHeader = parseInt(\n        xhr.getResponseHeader('Content-Length') ?? '',\n        10\n    );\n    if (!isNaN(contentLengthHeader)) {\n        return contentLengthHeader;\n    }\n    return null;\n}\n\nexport function calculateResponseSize(xhr: XMLHttpRequest): number {\n    const contentLengthHeader = getResponseContentLengthFromHeader(xhr);\n    if (contentLengthHeader != null) {\n        return contentLengthHeader as number;\n    }\n\n    const response = xhr.response;\n    if (!response) {\n        return MISSING_RESOURCE_SIZE;\n    }\n\n    let size;\n    try {\n        switch (xhr.responseType) {\n            case '':\n            case 'text':\n                // String\n                size = byteLength(response);\n                break;\n            case 'blob':\n                size = response.size;\n                break;\n            case 'arraybuffer':\n                size = response.byteLength;\n                break;\n            case 'document':\n                // currently not supported by RN as of 0.66\n                // HTML Document or XML Document\n                break;\n            case 'json':\n                // plain JS object\n                // original size was lost, because this is the object which was parsed.\n                // We can only convert back to the string and calculate the size,\n                // which will roughly match original.\n                size = byteLength(JSON.stringify(response));\n                break;\n            default:\n                break;\n        }\n    } catch (e) {\n        InternalLog.log(\n            `${RESOURCE_SIZE_ERROR_MESSAGE}${e}`,\n            SdkVerbosity.ERROR\n        );\n    }\n\n    if (typeof size !== 'number') {\n        return MISSING_RESOURCE_SIZE;\n    }\n    return size;\n}\n"]}