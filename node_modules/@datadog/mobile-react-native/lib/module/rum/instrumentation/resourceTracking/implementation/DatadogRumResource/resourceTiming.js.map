{"version":3,"sources":["resourceTiming.ts"],"names":["Platform","createTimings","startTime","responseStartTime","responseEndTime","firstByte","formatTiming","download","fetch","origin","start","end","duration","timeToNanos","OS","durationMs","toFixed"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,cAAzB;AAuBA,OAAO,SAASC,aAAT,CACHC,SADG,EAEHC,iBAFG,EAGHC,eAHG,EAIY;AACf,QAAMC,SAAS,GAAGC,YAAY,CAACJ,SAAD,EAAYA,SAAZ,EAAuBC,iBAAvB,CAA9B;AACA,QAAMI,QAAQ,GAAGD,YAAY,CACzBJ,SADyB,EAEzBC,iBAFyB,EAGzBC,eAHyB,CAA7B,CAFe,CAOf;;AACA,QAAMI,KAAK,GAAGF,YAAY,CAACJ,SAAD,EAAYA,SAAZ,EAAuBE,eAAvB,CAA1B;AAEA,SAAO;AACHC,IAAAA,SADG;AAEHE,IAAAA,QAFG;AAGHC,IAAAA;AAHG,GAAP;AAKH;AAED;AACA;AACA;AACA;AACA;;AACA,SAASF,YAAT,CAAsBG,MAAtB,EAAsCC,KAAtC,EAAqDC,GAArD,EAA0E;AACtE,SAAO;AACHC,IAAAA,QAAQ,EAAEC,WAAW,CAACF,GAAG,GAAGD,KAAP,CADlB;AAEH;AACA;AACAR,IAAAA,SAAS,EACLF,QAAQ,CAACc,EAAT,KAAgB,KAAhB,GACMD,WAAW,CAACH,KAAD,CADjB,GAEMG,WAAW,CAACH,KAAK,GAAGD,MAAT;AAPlB,GAAP;AASH;;AAED,SAASI,WAAT,CAAqBE,UAArB,EAAiD;AAC7C,SAAO,CAAC,CAACA,UAAU,GAAG,GAAd,EAAmBC,OAAnB,CAA2B,CAA3B,CAAR;AACH","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport { Platform } from 'react-native';\n\ninterface Timing {\n    /**\n     * Time relative (absolute in case of iOS) to some point, in ns.\n     */\n    startTime: number;\n    /**\n     * Duration in ns.\n     */\n    duration: number;\n}\n\ninterface ResourceTimings {\n    // unlike in Performance API it is not the time until request\n    // starts (requestStart, before it can be connect, SSL, DNS),\n    // but the time until the response is first seen\n    firstByte: Timing;\n    download: Timing;\n    // required by iOS, total timing from the beginning to the end\n    fetch: Timing;\n}\n\nexport function createTimings(\n    startTime: number,\n    responseStartTime: number,\n    responseEndTime: number\n): ResourceTimings {\n    const firstByte = formatTiming(startTime, startTime, responseStartTime);\n    const download = formatTiming(\n        startTime,\n        responseStartTime,\n        responseEndTime\n    );\n    // needed for iOS, simply total duration from start to end\n    const fetch = formatTiming(startTime, startTime, responseEndTime);\n\n    return {\n        firstByte,\n        download,\n        fetch\n    };\n}\n\n/**\n * @param origin Start time (absolute) of the request\n * @param start Start time (absolute) of the timing\n * @param end End time (absolute) of the timing\n */\nfunction formatTiming(origin: number, start: number, end: number): Timing {\n    return {\n        duration: timeToNanos(end - start),\n        // if it is Android, startTime should be relative to the origin,\n        // if it is iOS - absolute (unix timestamp)\n        startTime:\n            Platform.OS === 'ios'\n                ? timeToNanos(start)\n                : timeToNanos(start - origin)\n    };\n}\n\nfunction timeToNanos(durationMs: number): number {\n    return +(durationMs * 1e6).toFixed(0);\n}\n"]}