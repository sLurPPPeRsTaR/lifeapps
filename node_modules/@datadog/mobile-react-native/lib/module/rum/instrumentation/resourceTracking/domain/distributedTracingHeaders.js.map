{"version":3,"sources":["distributedTracingHeaders.ts"],"names":["PropagatorType","SAMPLING_PRIORITY_HEADER_KEY","ORIGIN_HEADER_KEY","ORIGIN_RUM","TRACE_ID_HEADER_KEY","PARENT_ID_HEADER_KEY","TRACECONTEXT_HEADER_KEY","B3_HEADER_KEY","B3_MULTI_TRACE_ID_HEADER_KEY","B3_MULTI_SPAN_ID_HEADER_KEY","B3_MULTI_SAMPLED_HEADER_KEY","getTracingHeaders","tracingAttributes","headers","tracingStrategy","propagatorTypes","forEach","propagator","DATADOG","push","header","value","samplingPriorityHeader","traceId","toString","spanId","TRACECONTEXT","generateTraceContextHeader","version","parentId","isSampled","B3","generateB3Header","B3MULTI","toPaddedString","flags"],"mappings":"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","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport { PropagatorType } from '../../../types';\n\nimport type {\n    DdRumResourceTracingAttributes,\n    SpanId,\n    TraceId\n} from './distributedTracing';\n\nexport const SAMPLING_PRIORITY_HEADER_KEY = 'x-datadog-sampling-priority';\n/**\n * Datadog headers\n */\nexport const ORIGIN_HEADER_KEY = 'x-datadog-origin';\nexport const ORIGIN_RUM = 'rum';\nexport const TRACE_ID_HEADER_KEY = 'x-datadog-trace-id';\nexport const PARENT_ID_HEADER_KEY = 'x-datadog-parent-id';\n/**\n * OTel headers\n */\nexport const TRACECONTEXT_HEADER_KEY = 'traceparent';\nexport const B3_HEADER_KEY = 'b3';\nexport const B3_MULTI_TRACE_ID_HEADER_KEY = 'X-B3-TraceId';\nexport const B3_MULTI_SPAN_ID_HEADER_KEY = 'X-B3-SpanId';\nexport const B3_MULTI_SAMPLED_HEADER_KEY = 'X-B3-Sampled';\n\nexport const getTracingHeaders = (\n    tracingAttributes: DdRumResourceTracingAttributes\n): { header: string; value: string }[] => {\n    const headers: { header: string; value: string }[] = [];\n    if (tracingAttributes.tracingStrategy === 'DISCARD') {\n        return headers;\n    }\n    tracingAttributes.propagatorTypes.forEach(propagator => {\n        switch (propagator) {\n            case PropagatorType.DATADOG: {\n                headers.push(\n                    {\n                        header: ORIGIN_HEADER_KEY,\n                        value: ORIGIN_RUM\n                    },\n                    {\n                        header: SAMPLING_PRIORITY_HEADER_KEY,\n                        value: tracingAttributes.samplingPriorityHeader\n                    },\n                    {\n                        header: TRACE_ID_HEADER_KEY,\n                        value: tracingAttributes.traceId.toString(10)\n                    },\n                    {\n                        header: PARENT_ID_HEADER_KEY,\n                        value: tracingAttributes.spanId.toString(10)\n                    }\n                );\n                break;\n            }\n            case PropagatorType.TRACECONTEXT: {\n                headers.push({\n                    header: TRACECONTEXT_HEADER_KEY,\n                    value: generateTraceContextHeader({\n                        version: '00',\n                        traceId: tracingAttributes.traceId,\n                        parentId: tracingAttributes.spanId,\n                        isSampled:\n                            tracingAttributes.samplingPriorityHeader === '1'\n                    })\n                });\n                break;\n            }\n            case PropagatorType.B3: {\n                headers.push({\n                    header: B3_HEADER_KEY,\n                    value: generateB3Header({\n                        traceId: tracingAttributes.traceId,\n                        spanId: tracingAttributes.spanId,\n                        isSampled:\n                            tracingAttributes.samplingPriorityHeader === '1'\n                    })\n                });\n                break;\n            }\n            case PropagatorType.B3MULTI: {\n                headers.push(\n                    {\n                        header: B3_MULTI_TRACE_ID_HEADER_KEY,\n                        value: tracingAttributes.traceId.toPaddedString(16, 32)\n                    },\n                    {\n                        header: B3_MULTI_SPAN_ID_HEADER_KEY,\n                        value: tracingAttributes.spanId.toPaddedString(16, 16)\n                    },\n                    {\n                        header: B3_MULTI_SAMPLED_HEADER_KEY,\n                        value: tracingAttributes.samplingPriorityHeader\n                    }\n                );\n            }\n        }\n    });\n\n    return headers;\n};\n\nconst generateTraceContextHeader = ({\n    version,\n    traceId,\n    parentId,\n    isSampled\n}: {\n    version: string;\n    traceId: TraceId;\n    parentId: SpanId;\n    isSampled: boolean;\n}) => {\n    const flags = isSampled ? '01' : '00';\n    return `${version}-${traceId.toPaddedString(\n        16,\n        32\n    )}-${parentId.toPaddedString(16, 16)}-${flags}`;\n};\n\nconst generateB3Header = ({\n    traceId,\n    spanId,\n    isSampled\n}: {\n    traceId: TraceId;\n    spanId: SpanId;\n    isSampled: boolean;\n}) => {\n    const flags = isSampled ? '1' : '0';\n    return `${traceId.toPaddedString(16, 32)}-${spanId.toPaddedString(\n        16,\n        16\n    )}-${flags}`;\n};\n"]}