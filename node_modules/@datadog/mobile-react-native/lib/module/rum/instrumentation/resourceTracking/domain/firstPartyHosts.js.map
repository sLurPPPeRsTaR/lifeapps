{"version":3,"sources":["firstPartyHosts.ts"],"names":["InternalLog","SdkVerbosity","NO_MATCH_REGEX","RegExp","escapeRegExp","string","replace","firstPartyHostsRegexMapBuilder","firstPartyHosts","hostsMap","datadog","tracecontext","b3","b3multi","forEach","host","propagatorTypes","propagatorType","push","match","regexMap","Object","entries","hosts","length","regex","firstPartyHostsRegexBuilder","firstPartyHostsRegex","map","join","test","e","log","JSON","stringify","WARN","getPropagatorsForHost","hostname","firstPartyHostsRegexMap","matchedPropagatorTypes"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,QAA4B,yBAA5B;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAOA;AACA,OAAO,MAAMC,cAAc,GAAG,IAAIC,MAAJ,CAAW,IAAX,CAAvB,C,CAEP;;AACA,MAAMC,YAAY,GAAIC,MAAD,IAAoB;AACrC,SAAOA,MAAM,CAACC,OAAP,CAAe,qBAAf,EAAsC,MAAtC,CAAP,CADqC,CACiB;AACzD,CAFD;;AAIA,OAAO,MAAMC,8BAA8B,GACvCC,eAD0C,IAE/B;AACX,QAAMC,QAA0C,GAAG;AAC/CC,IAAAA,OAAO,EAAE,EADsC;AAE/CC,IAAAA,YAAY,EAAE,EAFiC;AAG/CC,IAAAA,EAAE,EAAE,EAH2C;AAI/CC,IAAAA,OAAO,EAAE;AAJsC,GAAnD;AAOAL,EAAAA,eAAe,CAACM,OAAhB,CAAwBC,IAAI,IAAI;AAC5BA,IAAAA,IAAI,CAACC,eAAL,CAAqBF,OAArB,CAA6BG,cAAc,IAAI;AAC3CR,MAAAA,QAAQ,CAACQ,cAAD,CAAR,CAAyBC,IAAzB,CAA8BH,IAAI,CAACI,KAAnC;AACH,KAFD;AAGH,GAJD;AAMA,QAAMC,QAA6D,GAAG,EAAtE;AACAC,EAAAA,MAAM,CAACC,OAAP,CAAeb,QAAf,EAAyBK,OAAzB,CAAiC,CAAC,CAACG,cAAD,EAAiBM,KAAjB,CAAD,KAA6B;AAC1D,QAAIA,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB;AAClBJ,MAAAA,QAAQ,CAACF,IAAT,CAAc;AACVD,QAAAA,cAAc,EAAEA,cADN;AAEVQ,QAAAA,KAAK,EAAEC,2BAA2B,CAACH,KAAD;AAFxB,OAAd;AAIH;AACJ,GAPD;AASA,SAAOH,QAAP;AACH,CA3BM;;AA6BP,MAAMM,2BAA2B,GAAIlB,eAAD,IAAuC;AACvE,MAAIA,eAAe,CAACgB,MAAhB,KAA2B,CAA/B,EAAkC;AAC9B,WAAOtB,cAAP;AACH;;AACD,MAAI;AACA;AACA;AACA,UAAMyB,oBAAoB,GAAG,IAAIxB,MAAJ,CACxB,aAAYK,eAAe,CACvBoB,GADQ,CACJb,IAAI,IAAK,GAAEX,YAAY,CAACW,IAAD,CAAO,GAD1B,EAERc,IAFQ,CAEH,GAFG,CAEE,GAHU,CAA7B;AAKAF,IAAAA,oBAAoB,CAACG,IAArB,CAA0B,yBAA1B;AACA,WAAOH,oBAAP;AACH,GAVD,CAUE,OAAOI,CAAP,EAAU;AACR/B,IAAAA,WAAW,CAACgC,GAAZ,CACK,kCAAiCC,IAAI,CAACC,SAAL,CAC9B1B,eAD8B,CAEhC,wCAHN,EAIIP,YAAY,CAACkC,IAJjB;AAMA,WAAOjC,cAAP;AACH;AACJ,CAvBD;;AAyBA,OAAO,MAAMkC,qBAAqB,GAAG,CACjCC,QADiC,EAEjCC,uBAFiC,KAGP;AAC1B,QAAMC,sBAAwC,GAAG,EAAjD;AACAD,EAAAA,uBAAuB,CAACxB,OAAxB,CAAgC,CAAC;AAAEW,IAAAA,KAAF;AAASR,IAAAA;AAAT,GAAD,KAA+B;AAC3D,QAAIQ,KAAK,CAACK,IAAN,CAAWO,QAAX,CAAJ,EAA0B;AACtBE,MAAAA,sBAAsB,CAACrB,IAAvB,CAA4BD,cAA5B;AACH;AACJ,GAJD;AAKA,SAAOsB,sBAAsB,CAACf,MAAvB,GAAgC,CAAhC,GAAoCe,sBAApC,GAA6D,IAApE;AACH,CAXM","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport { InternalLog } from '../../../../InternalLog';\nimport { SdkVerbosity } from '../../../../SdkVerbosity';\nimport type { FirstPartyHost, PropagatorType } from '../../../types';\n\nimport type { RegexMap } from './interfaces/RequestProxy';\n\nexport type Hostname = { _type: 'Hostname' } & string;\n\n// This regex does not match anything\nexport const NO_MATCH_REGEX = new RegExp('a^');\n\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\nconst escapeRegExp = (string: string) => {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n};\n\nexport const firstPartyHostsRegexMapBuilder = (\n    firstPartyHosts: FirstPartyHost[]\n): RegexMap => {\n    const hostsMap: Record<PropagatorType, string[]> = {\n        datadog: [],\n        tracecontext: [],\n        b3: [],\n        b3multi: []\n    };\n\n    firstPartyHosts.forEach(host => {\n        host.propagatorTypes.forEach(propagatorType => {\n            hostsMap[propagatorType].push(host.match);\n        });\n    });\n\n    const regexMap: { regex: RegExp; propagatorType: PropagatorType }[] = [];\n    Object.entries(hostsMap).forEach(([propagatorType, hosts]) => {\n        if (hosts.length > 0) {\n            regexMap.push({\n                propagatorType: propagatorType as PropagatorType,\n                regex: firstPartyHostsRegexBuilder(hosts)\n            });\n        }\n    });\n\n    return regexMap;\n};\n\nconst firstPartyHostsRegexBuilder = (firstPartyHosts: string[]): RegExp => {\n    if (firstPartyHosts.length === 0) {\n        return NO_MATCH_REGEX;\n    }\n    try {\n        // A regexp for matching hosts, e.g. when `hosts` is \"example.com\", it will match\n        // \"example.com\", \"api.example.com\", but not \"foo.com\".\n        const firstPartyHostsRegex = new RegExp(\n            `^(.*\\\\.)*(${firstPartyHosts\n                .map(host => `${escapeRegExp(host)}$`)\n                .join('|')})`\n        );\n        firstPartyHostsRegex.test('test_the_regex_is_valid');\n        return firstPartyHostsRegex;\n    } catch (e) {\n        InternalLog.log(\n            `Invalid first party hosts list ${JSON.stringify(\n                firstPartyHosts\n            )}. Regular expressions are not allowed.`,\n            SdkVerbosity.WARN\n        );\n        return NO_MATCH_REGEX;\n    }\n};\n\nexport const getPropagatorsForHost = (\n    hostname: Hostname,\n    firstPartyHostsRegexMap: RegexMap\n): PropagatorType[] | null => {\n    const matchedPropagatorTypes: PropagatorType[] = [];\n    firstPartyHostsRegexMap.forEach(({ regex, propagatorType }) => {\n        if (regex.test(hostname)) {\n            matchedPropagatorTypes.push(propagatorType);\n        }\n    });\n    return matchedPropagatorTypes.length > 0 ? matchedPropagatorTypes : null;\n};\n"]}