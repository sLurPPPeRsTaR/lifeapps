{"version":3,"sources":["DdRumErrorTracking.tsx"],"names":["InternalLog","SdkVerbosity","getErrorMessage","getErrorStackTrace","EMPTY_STACK_TRACE","DdRum","ErrorSource","DdRumErrorTracking","startTracking","isTracking","log","WARN","ErrorUtils","defaultErrorHandler","getGlobalHandler","defaultConsoleError","console","error","setGlobalHandler","onGlobalError","onConsoleError","INFO","ERROR","isFatal","message","stacktrace","addError","SOURCE","then","isInDefaultErrorHandler","params","stack","i","length","param","paramStack","map","join","CONSOLE","apply","_error","_isFatal","_params"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AAIA,SAASA,WAAT,QAA4B,mBAA5B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SACIC,eADJ,EAEIC,kBAFJ,EAGIC,iBAHJ,QAIO,kBAJP;AAKA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,WAAT,QAA4B,UAA5B;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAN,CAAyB;AAK5B;AAGA;;AAGA;AACJ;AACA;AACwB,SAAbC,aAAa,GAAS;AACzB;AACA,QAAID,kBAAkB,CAACE,UAAvB,EAAmC;AAC/BT,MAAAA,WAAW,CAACU,GAAZ,CACI,wCADJ,EAEIT,YAAY,CAACU,IAFjB;AAIA;AACH;;AAED,QAAIC,UAAJ,EAAgB;AACZL,MAAAA,kBAAkB,CAACM,mBAAnB,GAAyCD,UAAU,CAACE,gBAAX,EAAzC;AACAP,MAAAA,kBAAkB,CAACQ,mBAAnB,GAAyCC,OAAO,CAACC,KAAjD;AAEAL,MAAAA,UAAU,CAACM,gBAAX,CAA4BX,kBAAkB,CAACY,aAA/C;AACAH,MAAAA,OAAO,CAACC,KAAR,GAAgBV,kBAAkB,CAACa,cAAnC;AAEAb,MAAAA,kBAAkB,CAACE,UAAnB,GAAgC,IAAhC;AACAT,MAAAA,WAAW,CAACU,GAAZ,CACI,gCADJ,EAEIT,YAAY,CAACoB,IAFjB;AAIH,KAZD,MAYO;AACHrB,MAAAA,WAAW,CAACU,GAAZ,CACI,4DADJ,EAEIT,YAAY,CAACqB,KAFjB;AAIH;AACJ,GA1C2B,CA4C5B;;;AACoB,SAAbH,aAAa,CAACF,KAAD,EAAaM,OAAb,EAAsC;AACtD,UAAMC,OAAO,GAAGtB,eAAe,CAACe,KAAD,CAA/B;AACA,UAAMQ,UAAU,GAAGtB,kBAAkB,CAACc,KAAD,CAArC;AACAZ,IAAAA,KAAK,CAACqB,QAAN,CAAeF,OAAf,EAAwBlB,WAAW,CAACqB,MAApC,EAA4CF,UAA5C,EAAwD;AACpD,4BAAsBF,OAD8B;AAEpD,uBAAiBN;AAFmC,KAAxD,EAGGW,IAHH,CAGQ,MAAM;AACVrB,MAAAA,kBAAkB,CAACsB,uBAAnB,GAA6C,IAA7C;;AACA,UAAI;AACAtB,QAAAA,kBAAkB,CAACM,mBAAnB,CAAuCI,KAAvC,EAA8CM,OAA9C;AACH,OAFD,SAEU;AACNhB,QAAAA,kBAAkB,CAACsB,uBAAnB,GAA6C,KAA7C;AACH;AACJ,KAVD;AAWH;;AAEoB,SAAdT,cAAc,CAAC,GAAGU,MAAJ,EAA6B;AAC9C,QAAIvB,kBAAkB,CAACsB,uBAAvB,EAAgD;AAC5C;AACH;;AAED,QAAIE,KAAa,GAAG3B,iBAApB;;AACA,SAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,IAAI,CAAxC,EAA2C;AACvC,YAAME,KAAK,GAAGJ,MAAM,CAACE,CAAD,CAApB;AACA,YAAMG,UAAU,GAAGhC,kBAAkB,CAAC+B,KAAD,CAArC;;AACA,UAAIC,UAAU,KAAK/B,iBAAnB,EAAsC;AAClC2B,QAAAA,KAAK,GAAGI,UAAR;AACA;AACH;AACJ;;AAED,UAAMX,OAAO,GAAGM,MAAM,CACjBM,GADW,CACPF,KAAK,IAAI;AACV,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,eAAOA,KAAP;AACH,OAFD,MAEO;AACH,eAAOhC,eAAe,CAACgC,KAAD,CAAtB;AACH;AACJ,KAPW,EAQXG,IARW,CAQN,GARM,CAAhB;AAUAhC,IAAAA,KAAK,CAACqB,QAAN,CAAeF,OAAf,EAAwBlB,WAAW,CAACgC,OAApC,EAA6CP,KAA7C,EAAoDH,IAApD,CAAyD,MAAM;AAC3DrB,MAAAA,kBAAkB,CAACQ,mBAAnB,CAAuCwB,KAAvC,CAA6CvB,OAA7C,EAAsDc,MAAtD;AACH,KAFD;AAGH;;AAzF2B;;gBAAnBvB,kB,gBACmB,K;;gBADnBA,kB,6BAGgC,K;;gBAHhCA,kB,yBAMkD,CAACiC,MAAD,EAAcC,QAAd,KAAqC,CAAG,C;;gBAN1FlC,kB,yBAS4B,CAAC,GAAGmC,OAAJ,KAA2B,CAAG,C","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport type { ErrorHandlerCallback } from 'react-native';\n\nimport { InternalLog } from '../../InternalLog';\nimport { SdkVerbosity } from '../../SdkVerbosity';\nimport {\n    getErrorMessage,\n    getErrorStackTrace,\n    EMPTY_STACK_TRACE\n} from '../../errorUtils';\nimport { DdRum } from '../DdRum';\nimport { ErrorSource } from '../types';\n\n/**\n * Provides RUM auto-instrumentation feature to track errors as RUM events.\n */\nexport class DdRumErrorTracking {\n    private static isTracking = false;\n\n    private static isInDefaultErrorHandler = false;\n\n    // eslint-disable-next-line\n    private static defaultErrorHandler: ErrorHandlerCallback = (_error: any, _isFatal?: boolean) => { }\n\n    // eslint-disable-next-line\n    private static defaultConsoleError = (..._params: unknown[]) => { }\n\n    /**\n     * Starts tracking errors and sends a RUM Error event every time an error is detected.\n     */\n    static startTracking(): void {\n        // extra safety to avoid wrapping the Error handler twice\n        if (DdRumErrorTracking.isTracking) {\n            InternalLog.log(\n                'Datadog SDK is already tracking errors',\n                SdkVerbosity.WARN\n            );\n            return;\n        }\n\n        if (ErrorUtils) {\n            DdRumErrorTracking.defaultErrorHandler = ErrorUtils.getGlobalHandler();\n            DdRumErrorTracking.defaultConsoleError = console.error;\n\n            ErrorUtils.setGlobalHandler(DdRumErrorTracking.onGlobalError);\n            console.error = DdRumErrorTracking.onConsoleError;\n\n            DdRumErrorTracking.isTracking = true;\n            InternalLog.log(\n                'Datadog SDK is tracking errors',\n                SdkVerbosity.INFO\n            );\n        } else {\n            InternalLog.log(\n                'Datadog SDK cannot track errors, ErrorUtils is not defined',\n                SdkVerbosity.ERROR\n            );\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    static onGlobalError(error: any, isFatal?: boolean): void {\n        const message = getErrorMessage(error);\n        const stacktrace = getErrorStackTrace(error);\n        DdRum.addError(message, ErrorSource.SOURCE, stacktrace, {\n            '_dd.error.is_crash': isFatal,\n            '_dd.error.raw': error\n        }).then(() => {\n            DdRumErrorTracking.isInDefaultErrorHandler = true;\n            try {\n                DdRumErrorTracking.defaultErrorHandler(error, isFatal);\n            } finally {\n                DdRumErrorTracking.isInDefaultErrorHandler = false;\n            }\n        });\n    }\n\n    static onConsoleError(...params: unknown[]): void {\n        if (DdRumErrorTracking.isInDefaultErrorHandler) {\n            return;\n        }\n\n        let stack: string = EMPTY_STACK_TRACE;\n        for (let i = 0; i < params.length; i += 1) {\n            const param = params[i];\n            const paramStack = getErrorStackTrace(param);\n            if (paramStack !== EMPTY_STACK_TRACE) {\n                stack = paramStack;\n                break;\n            }\n        }\n\n        const message = params\n            .map(param => {\n                if (typeof param === 'string') {\n                    return param;\n                } else {\n                    return getErrorMessage(param);\n                }\n            })\n            .join(' ');\n\n        DdRum.addError(message, ErrorSource.CONSOLE, stack).then(() => {\n            DdRumErrorTracking.defaultConsoleError.apply(console, params);\n        });\n    }\n}\n"]}