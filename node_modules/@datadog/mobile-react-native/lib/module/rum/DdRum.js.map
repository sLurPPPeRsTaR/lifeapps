{"version":3,"sources":["DdRum.ts"],"names":["NativeModules","InternalLog","SdkVerbosity","TimeProvider","DdSdk","bufferVoidNativeCall","generateActionEventMapper","generateErrorEventMapper","generateResourceEventMapper","timeProvider","generateEmptyPromise","Promise","resolve","DdRumWrapper","DdRum","undefined","type","name","context","timestampMs","mappedEvent","actionEventMapper","applyEventMapper","nativeRum","stopAction","args","isNewStopActionAPI","now","isOldStopActionAPI","lastActionData","telemetryDebug","log","WARN","startView","key","DEBUG","stopView","startAction","nativeCallArgs","getStopActionNativeCallArgs","callNativeStopAction","addAction","actionContext","startResource","method","url","stopResource","statusCode","kind","size","resourceContext","resourceEventMapper","addError","message","source","stacktrace","errorEventMapper","updatedContext","addTiming","registerErrorEventMapper","unregisterErrorEventMapper","registerResourceEventMapper","unregisterResourceEventMapper","registerActionEventMapper","unregisterActionEventMapper"],"mappings":"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","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport type { GestureResponderEvent } from 'react-native';\nimport { NativeModules } from 'react-native';\n\nimport { InternalLog } from '../InternalLog';\nimport { SdkVerbosity } from '../SdkVerbosity';\nimport { TimeProvider } from '../TimeProvider';\nimport { DdSdk } from '../foundation';\nimport type { DdNativeRumType } from '../nativeModulesTypes';\nimport { bufferVoidNativeCall } from '../sdk/DatadogProvider/Buffer/bufferNativeCall';\n\nimport type { ActionEventMapper } from './eventMappers/actionEventMapper';\nimport { generateActionEventMapper } from './eventMappers/actionEventMapper';\nimport type { ErrorEventMapper } from './eventMappers/errorEventMapper';\nimport { generateErrorEventMapper } from './eventMappers/errorEventMapper';\nimport type { ResourceEventMapper } from './eventMappers/resourceEventMapper';\nimport { generateResourceEventMapper } from './eventMappers/resourceEventMapper';\nimport type {\n    DdRumType,\n    RumActionType,\n    ResourceKind,\n    ErrorSource\n} from './types';\n\nconst timeProvider = new TimeProvider();\n\nconst generateEmptyPromise = () => new Promise<void>(resolve => resolve());\n\nclass DdRumWrapper implements DdRumType {\n    private nativeRum: DdNativeRumType = NativeModules.DdRum;\n    private lastActionData?: { type: RumActionType; name: string };\n    private errorEventMapper = generateErrorEventMapper(undefined);\n    private resourceEventMapper = generateResourceEventMapper(undefined);\n    private actionEventMapper = generateActionEventMapper(undefined);\n\n    startView(\n        key: string,\n        name: string,\n        context: object = {},\n        timestampMs: number = timeProvider.now()\n    ): Promise<void> {\n        InternalLog.log(\n            `Starting RUM View “${name}” #${key}`,\n            SdkVerbosity.DEBUG\n        );\n        return bufferVoidNativeCall(() =>\n            this.nativeRum.startView(key, name, context, timestampMs)\n        );\n    }\n\n    stopView(\n        key: string,\n        context: object = {},\n        timestampMs: number = timeProvider.now()\n    ): Promise<void> {\n        InternalLog.log(`Stopping RUM View #${key}`, SdkVerbosity.DEBUG);\n        return bufferVoidNativeCall(() =>\n            this.nativeRum.stopView(key, context, timestampMs)\n        );\n    }\n\n    startAction(\n        type: RumActionType,\n        name: string,\n        context: object = {},\n        timestampMs: number = timeProvider.now()\n    ): Promise<void> {\n        InternalLog.log(\n            `Starting RUM Action “${name}” (${type})`,\n            SdkVerbosity.DEBUG\n        );\n        this.lastActionData = { type, name };\n        return bufferVoidNativeCall(() =>\n            this.nativeRum.startAction(type, name, context, timestampMs)\n        );\n    }\n\n    stopAction(\n        ...args:\n            | [\n                  type: RumActionType,\n                  name: string,\n                  context?: object,\n                  timestampMs?: number\n              ]\n            | [context?: object, timestampMs?: number]\n    ): Promise<void> {\n        InternalLog.log('Stopping current RUM Action', SdkVerbosity.DEBUG);\n        const nativeCallArgs = this.getStopActionNativeCallArgs(args);\n        this.lastActionData = undefined;\n        if (!nativeCallArgs) {\n            return generateEmptyPromise();\n        }\n        return this.callNativeStopAction(...nativeCallArgs);\n    }\n\n    private callNativeStopAction = (\n        type: RumActionType,\n        name: string,\n        context: object,\n        timestampMs: number\n    ): Promise<void> => {\n        const mappedEvent = this.actionEventMapper.applyEventMapper({\n            type,\n            name,\n            context,\n            timestampMs\n        });\n        if (!mappedEvent) {\n            return bufferVoidNativeCall(() =>\n                this.nativeRum.stopAction(\n                    type,\n                    name,\n                    {\n                        '_dd.action.drop_action': true\n                    },\n                    timestampMs\n                )\n            );\n        }\n\n        return bufferVoidNativeCall(() =>\n            this.nativeRum.stopAction(\n                mappedEvent.type,\n                mappedEvent.name,\n                mappedEvent.context,\n                mappedEvent.timestampMs\n            )\n        );\n    };\n\n    private getStopActionNativeCallArgs = (\n        args:\n            | [\n                  type: RumActionType,\n                  name: string,\n                  context?: object,\n                  timestampMs?: number\n              ]\n            | [context?: object, timestampMs?: number]\n    ):\n        | [\n              type: RumActionType,\n              name: string,\n              context: object,\n              timestampMs: number\n          ]\n        | null => {\n        if (isNewStopActionAPI(args)) {\n            return [\n                args[0],\n                args[1],\n                args[2] || {},\n                args[3] || timeProvider.now()\n            ];\n        }\n        if (isOldStopActionAPI(args)) {\n            if (this.lastActionData) {\n                DdSdk.telemetryDebug(\n                    'DDdRum.stopAction called with the old signature'\n                );\n                const { type, name } = this.lastActionData;\n                return [\n                    type,\n                    name,\n                    args[0] || {},\n                    args[1] || timeProvider.now()\n                ];\n            }\n            InternalLog.log(\n                'DdRum.startAction needs to be called before DdRum.stopAction',\n                SdkVerbosity.WARN\n            );\n        } else {\n            InternalLog.log(\n                'DdRum.stopAction was called with wrong arguments',\n                SdkVerbosity.WARN\n            );\n        }\n\n        return null;\n    };\n\n    addAction(\n        type: RumActionType,\n        name: string,\n        context: object = {},\n        timestampMs: number = timeProvider.now(),\n        actionContext?: GestureResponderEvent\n    ): Promise<void> {\n        const mappedEvent = this.actionEventMapper.applyEventMapper({\n            type,\n            name,\n            context,\n            timestampMs,\n            actionContext\n        });\n        if (!mappedEvent) {\n            return generateEmptyPromise();\n        }\n        InternalLog.log(\n            `Adding RUM Action “${name}” (${type})`,\n            SdkVerbosity.DEBUG\n        );\n        return bufferVoidNativeCall(() =>\n            this.nativeRum.addAction(\n                mappedEvent.type,\n                mappedEvent.name,\n                mappedEvent.context,\n                mappedEvent.timestampMs\n            )\n        );\n    }\n\n    startResource(\n        key: string,\n        method: string,\n        url: string,\n        context: object = {},\n        timestampMs: number = timeProvider.now()\n    ): Promise<void> {\n        InternalLog.log(\n            `Starting RUM Resource #${key} ${method}: ${url}`,\n            SdkVerbosity.DEBUG\n        );\n        return bufferVoidNativeCall(() =>\n            this.nativeRum.startResource(key, method, url, context, timestampMs)\n        );\n    }\n\n    stopResource(\n        key: string,\n        statusCode: number,\n        kind: ResourceKind,\n        size: number = -1,\n        context: object = {},\n        timestampMs: number = timeProvider.now(),\n        resourceContext?: XMLHttpRequest\n    ): Promise<void> {\n        const mappedEvent = this.resourceEventMapper.applyEventMapper({\n            key,\n            statusCode,\n            kind,\n            size,\n            context,\n            timestampMs,\n            resourceContext\n        });\n        if (!mappedEvent) {\n            /**\n             * To drop the resource we call `stopResource` and pass the `_dd.drop_resource` attribute in the context.\n             * It will be picked up by the resource mappers we implement on the native side that will drop the resource.\n             * This ensures we don't have any \"started\" resource left in memory on the native side.\n             */\n            return bufferVoidNativeCall(() =>\n                this.nativeRum.stopResource(\n                    key,\n                    statusCode,\n                    kind,\n                    size,\n                    {\n                        '_dd.resource.drop_resource': true\n                    },\n                    timestampMs\n                )\n            );\n        }\n\n        InternalLog.log(\n            `Stopping RUM Resource #${key} status:${statusCode}`,\n            SdkVerbosity.DEBUG\n        );\n        return bufferVoidNativeCall(() =>\n            this.nativeRum.stopResource(\n                mappedEvent.key,\n                mappedEvent.statusCode,\n                mappedEvent.kind,\n                mappedEvent.size,\n                mappedEvent.context,\n                mappedEvent.timestampMs\n            )\n        );\n    }\n\n    addError(\n        message: string,\n        source: ErrorSource,\n        stacktrace: string,\n        context: object = {},\n        timestampMs: number = timeProvider.now()\n    ): Promise<void> {\n        const mappedEvent = this.errorEventMapper.applyEventMapper({\n            message,\n            source,\n            stacktrace,\n            context,\n            timestampMs\n        });\n        if (!mappedEvent) {\n            return generateEmptyPromise();\n        }\n        InternalLog.log(`Adding RUM Error “${message}”`, SdkVerbosity.DEBUG);\n        const updatedContext: any = mappedEvent.context;\n        updatedContext['_dd.error.source_type'] = 'react-native';\n        return bufferVoidNativeCall(() =>\n            this.nativeRum.addError(\n                mappedEvent.message,\n                mappedEvent.source,\n                mappedEvent.stacktrace,\n                updatedContext,\n                mappedEvent.timestampMs\n            )\n        );\n    }\n\n    addTiming(name: string): Promise<void> {\n        InternalLog.log(\n            `Adding timing “${name}” to RUM View`,\n            SdkVerbosity.DEBUG\n        );\n        return bufferVoidNativeCall(() => this.nativeRum.addTiming(name));\n    }\n\n    registerErrorEventMapper(errorEventMapper: ErrorEventMapper) {\n        this.errorEventMapper = generateErrorEventMapper(errorEventMapper);\n    }\n\n    unregisterErrorEventMapper() {\n        this.errorEventMapper = generateErrorEventMapper(undefined);\n    }\n\n    registerResourceEventMapper(resourceEventMapper: ResourceEventMapper) {\n        this.resourceEventMapper = generateResourceEventMapper(\n            resourceEventMapper\n        );\n    }\n\n    unregisterResourceEventMapper() {\n        this.resourceEventMapper = generateResourceEventMapper(undefined);\n    }\n\n    registerActionEventMapper(actionEventMapper: ActionEventMapper) {\n        this.actionEventMapper = generateActionEventMapper(actionEventMapper);\n    }\n\n    unregisterActionEventMapper() {\n        this.actionEventMapper = generateActionEventMapper(undefined);\n    }\n}\n\nconst isNewStopActionAPI = (\n    args:\n        | [\n              type: RumActionType,\n              name: string,\n              context?: object,\n              timestampMs?: number\n          ]\n        | [context?: object, timestampMs?: number]\n): args is [\n    type: RumActionType,\n    name: string,\n    context?: object,\n    timestampMs?: number\n] => {\n    return typeof args[0] === 'string';\n};\n\nconst isOldStopActionAPI = (\n    args:\n        | [\n              type: RumActionType,\n              name: string,\n              context?: object,\n              timestampMs?: number\n          ]\n        | [context?: object, timestampMs?: number]\n): args is [context?: object, timestampMs?: number] => {\n    return typeof args[0] === 'object' || typeof args[0] === 'undefined';\n};\n\nexport const DdRum = new DdRumWrapper();\n"]}