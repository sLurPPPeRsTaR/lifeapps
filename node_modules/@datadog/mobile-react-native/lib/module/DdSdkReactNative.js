function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2016-Present Datadog, Inc.
 */
import { InteractionManager } from 'react-native';
import { DdSdkReactNativeConfiguration, buildConfigurationFromPartialConfiguration, addDefaultValuesToAutoInstrumentationConfiguration, InitializationMode, formatFirstPartyHosts } from './DdSdkReactNativeConfiguration';
import { InternalLog } from './InternalLog';
import { ProxyType } from './ProxyConfiguration';
import { SdkVerbosity } from './SdkVerbosity';
import { DdSdk } from './foundation';
import { DdLogs } from './logs/DdLogs';
import { adaptLongTaskThreshold } from './longTasksUtils';
import { DdRum } from './rum/DdRum';
import { DdRumErrorTracking } from './rum/instrumentation/DdRumErrorTracking';
import { DdRumUserInteractionTracking } from './rum/instrumentation/interactionTracking/DdRumUserInteractionTracking';
import { DdRumResourceTracking } from './rum/instrumentation/resourceTracking/DdRumResourceTracking';
import { AttributesSingleton } from './sdk/AttributesSingleton/AttributesSingleton';
import { BufferSingleton } from './sdk/DatadogProvider/Buffer/BufferSingleton';
import { UserInfoSingleton } from './sdk/UserInfoSingleton/UserInfoSingleton';
import { DdSdkConfiguration } from './types';
import { version as sdkVersion } from './version';
/**
 * This class initializes the Datadog SDK, and sets up communication with the server.
 */

export class DdSdkReactNative {
  // Proxy

  /**
   * Initializes the Datadog SDK.
   * @param configuration the configuration for the SDK library
   * @returns a Promise.
   */
  static async initialize(configuration) {
    await DdSdkReactNative.initializeNativeSDK(configuration, {
      initializationModeForTelemetry: 'LEGACY'
    });
    DdSdkReactNative.enableFeatures(configuration);
  }

  /**
   * FOR INTERNAL USE ONLY.
   */
  static async _initializeFromDatadogProvider(configuration) {
    DdSdkReactNative.enableFeatures(configuration);

    if (configuration.initializationMode === InitializationMode.SYNC) {
      return DdSdkReactNative.initializeNativeSDK(configuration, {
        initializationModeForTelemetry: 'SYNC'
      });
    }

    if (configuration.initializationMode === InitializationMode.ASYNC) {
      return InteractionManager.runAfterInteractions(() => {
        return DdSdkReactNative.initializeNativeSDK(configuration, {
          initializationModeForTelemetry: 'ASYNC'
        });
      });
    } // TODO: Remove when DdSdkReactNativeConfiguration is deprecated


    if (configuration instanceof DdSdkReactNativeConfiguration) {
      return DdSdkReactNative.initializeNativeSDK(configuration, {
        initializationModeForTelemetry: 'SYNC'
      });
    }
  }
  /**
   * FOR INTERNAL USE ONLY.
   */


  static async _enableFeaturesFromDatadogProvider(features) {
    DdSdkReactNative.features = features;
    DdSdkReactNative.enableFeatures(addDefaultValuesToAutoInstrumentationConfiguration(features));
  }
  /**
   * FOR INTERNAL USE ONLY.
   */


  /**
   * Adds a set of attributes to the global context attached with all future Logs, Spans and RUM events.
   * To remove an attribute, set it to `undefined` in a call to `setAttributes`.
   * @param attributes: The global context attributes.
   * @returns a Promise.
   */
  // eslint-disable-next-line @typescript-eslint/ban-types
  static async setAttributes(attributes) {
    InternalLog.log(`Setting attributes ${JSON.stringify(attributes)}`, SdkVerbosity.DEBUG);
    await DdSdk.setAttributes(attributes);
    AttributesSingleton.getInstance().setAttributes(attributes);
  }
  /**
   * Set the user information.
   * @param user: The user object (use builtin attributes: 'id', 'email', 'name', and/or any custom attribute).
   * @returns a Promise.
   */
  // eslint-disable-next-line @typescript-eslint/ban-types


  static async setUser(user) {
    InternalLog.log(`Setting user ${JSON.stringify(user)}`, SdkVerbosity.DEBUG);
    await DdSdk.setUser(user);
    UserInfoSingleton.getInstance().setUserInfo(user);
  }
  /**
   * Set the tracking consent regarding the data collection.
   * @param trackingConsent: One of TrackingConsent values.
   * @returns a Promise.
   */


  static setTrackingConsent(consent) {
    InternalLog.log(`Setting consent ${consent}`, SdkVerbosity.DEBUG);
    return DdSdk.setTrackingConsent(consent);
  }

  static enableFeatures(configuration) {
    if (DdSdkReactNative.wasAutoInstrumented) {
      InternalLog.log("Can't auto instrument Datadog, SDK was already instrumented", SdkVerbosity.WARN);
      return;
    }

    if (configuration.trackInteractions) {
      DdRumUserInteractionTracking.startTracking();
    }

    if (configuration.trackResources) {
      DdRumResourceTracking.startTracking({
        tracingSamplingRate: configuration.resourceTracingSamplingRate,
        firstPartyHosts: formatFirstPartyHosts(configuration.firstPartyHosts)
      });
    }

    if (configuration.trackErrors) {
      DdRumErrorTracking.startTracking();
    }

    if (configuration.logEventMapper) {
      DdLogs.registerLogEventMapper(configuration.logEventMapper);
    }

    if (configuration.errorEventMapper) {
      DdRum.registerErrorEventMapper(configuration.errorEventMapper);
    }

    if (configuration.resourceEventMapper) {
      DdRum.registerResourceEventMapper(configuration.resourceEventMapper);
    }

    if (configuration.actionEventMapper) {
      DdRum.registerActionEventMapper(configuration.actionEventMapper);
    }

    DdSdkReactNative.wasAutoInstrumented = true;
  }

}

_defineProperty(DdSdkReactNative, "DD_SOURCE_KEY", '_dd.source');

_defineProperty(DdSdkReactNative, "DD_SDK_VERSION", '_dd.sdk_version');

_defineProperty(DdSdkReactNative, "DD_SERVICE_NAME", '_dd.service_name');

_defineProperty(DdSdkReactNative, "DD_SDK_VERBOSITY_KEY", '_dd.sdk_verbosity');

_defineProperty(DdSdkReactNative, "DD_NATIVE_VIEW_TRACKING_KEY", '_dd.native_view_tracking');

_defineProperty(DdSdkReactNative, "DD_NATIVE_INTERACTION_TRACKING_KEY", '_dd.native_interaction_tracking');

_defineProperty(DdSdkReactNative, "DD_VERSION", '_dd.version');

_defineProperty(DdSdkReactNative, "DD_VERSION_SUFFIX", '_dd.version_suffix');

_defineProperty(DdSdkReactNative, "DD_PROXY_TYPE_KEY", '_dd.proxy.type');

_defineProperty(DdSdkReactNative, "DD_PROXY_ADDRESS_KEY", '_dd.proxy.address');

_defineProperty(DdSdkReactNative, "DD_PROXY_PORT_KEY", '_dd.proxy.port');

_defineProperty(DdSdkReactNative, "DD_PROXY_USERNAME_KEY", '_dd.proxy.username');

_defineProperty(DdSdkReactNative, "DD_PROXY_PASSWORD_KEY", '_dd.proxy.password');

_defineProperty(DdSdkReactNative, "wasInitialized", false);

_defineProperty(DdSdkReactNative, "wasAutoInstrumented", false);

_defineProperty(DdSdkReactNative, "features", void 0);

_defineProperty(DdSdkReactNative, "initializeNativeSDK", async (configuration, params) => {
  if (DdSdkReactNative.wasInitialized) {
    InternalLog.log("Can't initialize Datadog, SDK was already initialized", SdkVerbosity.WARN);

    if (!__DEV__) {
      DdSdk.telemetryDebug('RN SDK was already initialized in javascript');
    }

    return new Promise(resolve => resolve());
  }

  InternalLog.verbosity = configuration.verbosity;
  DdSdkReactNative.buildConfiguration(configuration);
  await DdSdk.initialize(new DdSdkConfiguration(configuration.clientToken, configuration.env, configuration.applicationId, configuration.nativeCrashReportEnabled, adaptLongTaskThreshold(configuration.nativeLongTaskThresholdMs), adaptLongTaskThreshold(configuration.longTaskThresholdMs), configuration.sampleRate === undefined ? configuration.sessionSamplingRate : configuration.sampleRate, configuration.site, configuration.trackingConsent, configuration.additionalConfig, configuration.telemetrySampleRate, configuration.vitalsUpdateFrequency, {
    initializationType: params.initializationModeForTelemetry,
    trackErrors: configuration.trackErrors,
    trackInteractions: configuration.trackInteractions,
    trackNetworkRequests: configuration.trackResources
  }));
  InternalLog.log('Datadog SDK was initialized', SdkVerbosity.INFO);
  DdSdkReactNative.wasInitialized = true;
  BufferSingleton.onInitialization();
});

_defineProperty(DdSdkReactNative, "_initializeFromDatadogProviderWithConfigurationAsync", async configuration => {
  if (!DdSdkReactNative.features) {
    InternalLog.log("Can't initialize Datadog, make sure the DatadogProvider component is mounted before calling this function", SdkVerbosity.WARN);
    return new Promise(resolve => resolve());
  }

  return DdSdkReactNative.initializeNativeSDK(buildConfigurationFromPartialConfiguration(DdSdkReactNative.features, configuration), {
    initializationModeForTelemetry: 'PARTIAL'
  });
});

_defineProperty(DdSdkReactNative, "buildConfiguration", configuration => {
  configuration.additionalConfig[DdSdkReactNative.DD_SOURCE_KEY] = 'react-native';
  configuration.additionalConfig[DdSdkReactNative.DD_SDK_VERSION] = sdkVersion;
  configuration.additionalConfig[DdSdkReactNative.DD_NATIVE_VIEW_TRACKING_KEY] = configuration.nativeViewTracking;
  configuration.additionalConfig[DdSdkReactNative.DD_NATIVE_INTERACTION_TRACKING_KEY] = configuration.nativeInteractionTracking;

  if (configuration.verbosity) {
    configuration.additionalConfig[DdSdkReactNative.DD_SDK_VERBOSITY_KEY] = configuration.verbosity;
  }

  if (configuration.proxyConfig) {
    const additionalConfig = configuration.additionalConfig;
    const proxyConfig = configuration.proxyConfig;
    additionalConfig[DdSdkReactNative.DD_PROXY_TYPE_KEY] = proxyConfig.type;
    additionalConfig[DdSdkReactNative.DD_PROXY_ADDRESS_KEY] = proxyConfig.address;
    additionalConfig[DdSdkReactNative.DD_PROXY_PORT_KEY] = proxyConfig.port;

    if (proxyConfig.username && proxyConfig.password) {
      if (proxyConfig.type === ProxyType.SOCKS) {
        console.warn("SOCKS proxy configuration doesn't support Basic authentication.");
      } else {
        additionalConfig[DdSdkReactNative.DD_PROXY_USERNAME_KEY] = proxyConfig.username;
        additionalConfig[DdSdkReactNative.DD_PROXY_PASSWORD_KEY] = proxyConfig.password;
      }
    }
  }

  if (configuration.serviceName) {
    configuration.additionalConfig[DdSdkReactNative.DD_SERVICE_NAME] = configuration.serviceName;
  }

  if (configuration.version) {
    configuration.additionalConfig[DdSdkReactNative.DD_VERSION] = `${configuration.version}${configuration.versionSuffix ? `-${configuration.versionSuffix}` : ''}`;
  } // If both version and version suffix are provided, we merge them into the version field.
  // To avoid adding it in again the native part, we only set it if the version isn't set.


  if (configuration.versionSuffix && !configuration.version) {
    configuration.additionalConfig[DdSdkReactNative.DD_VERSION_SUFFIX] = `-${configuration.versionSuffix}`;
  }

  configuration.additionalConfig['_dd.first_party_hosts'] = formatFirstPartyHosts(configuration.firstPartyHosts);
});
//# sourceMappingURL=DdSdkReactNative.js.map