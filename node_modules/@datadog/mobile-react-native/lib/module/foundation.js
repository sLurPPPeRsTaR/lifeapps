function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2016-Present Datadog, Inc.
 */
import { NativeModules } from 'react-native';
import { DdSdkConfiguration } from './types';
import { InternalLog } from "./InternalLog";
import { SdkVerbosity } from "./SdkVerbosity";
import { TimeProvider } from "./TimeProvider";
import { bufferNativeCallReturningId, bufferNativeCallWithId } from './sdk/DatadogProvider/Buffer/bufferNativeCall';
const timeProvider = new TimeProvider();

class DdTraceWrapper {
  constructor() {
    _defineProperty(this, "nativeTrace", NativeModules.DdTrace);
  }

  startSpan(operation, context = {}, timestampMs = timeProvider.now()) {
    let spanId = bufferNativeCallReturningId(() => this.nativeTrace.startSpan(operation, context, timestampMs));
    InternalLog.log("Starting span “" + operation + "” #" + spanId, SdkVerbosity.DEBUG);
    return spanId;
  }

  finishSpan(spanId, context = {}, timestampMs = timeProvider.now()) {
    InternalLog.log("Finishing span #" + spanId, SdkVerbosity.DEBUG);
    return bufferNativeCallWithId(id => this.nativeTrace.finishSpan(id, context, timestampMs), spanId);
  }

}

const DdSdk = NativeModules.DdSdk;
const DdTrace = new DdTraceWrapper();
export { DdSdkConfiguration, DdSdk, DdTrace };
//# sourceMappingURL=foundation.js.map