{"version":3,"sources":["DdSdkReactNativeConfiguration.tsx"],"names":["TrackingConsent","PropagatorType","VitalsUpdateFrequency","isLegacyFirstPartyHost","firstPartyHost","formatFirstPartyHosts","firstPartyHosts","map","host","match","propagatorTypes","DATADOG","DEFAULTS","nativeCrashReportEnabled","sessionSamplingRate","resourceTracingSamplingRate","site","longTaskThresholdMs","nativeLongTaskThresholdMs","nativeViewTracking","nativeInteractionTracking","getFirstPartyHosts","getAdditionalConfig","trackingConsent","GRANTED","telemetrySampleRate","vitalsUpdateFrequency","AVERAGE","logEventMapper","errorEventMapper","resourceEventMapper","actionEventMapper","DdSdkReactNativeConfiguration","constructor","clientToken","env","applicationId","trackInteractions","trackResources","trackErrors","undefined","addDefaultValuesToAutoInstrumentationConfiguration","features","setConfigurationAttribute","attribute","configuration","value","name","buildConfigurationFromPartialConfiguration","remainingConfiguration","SdkConfiguration","Object","keys","forEach","DatadogProviderConfiguration","InitializationMode","SYNC"],"mappings":"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","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport type { ProxyConfiguration } from './ProxyConfiguration';\nimport type { SdkVerbosity } from './SdkVerbosity';\nimport { TrackingConsent } from './TrackingConsent';\nimport type { LogEventMapper } from './logs/types';\nimport type { ActionEventMapper } from './rum/eventMappers/actionEventMapper';\nimport type { ErrorEventMapper } from './rum/eventMappers/errorEventMapper';\nimport type { ResourceEventMapper } from './rum/eventMappers/resourceEventMapper';\nimport type { FirstPartyHost } from './rum/types';\nimport { PropagatorType } from './rum/types';\n\nexport enum VitalsUpdateFrequency {\n    FREQUENT = 'FREQUENT',\n    AVERAGE = 'AVERAGE',\n    RARE = 'RARE',\n    NEVER = 'NEVER'\n}\n\nexport type FirstPartyHostsConfiguration = (\n    | FirstPartyHost\n    | LegacyFirstPartyHost\n)[];\n\nexport type LegacyFirstPartyHost = string;\n\nconst isLegacyFirstPartyHost = (\n    firstPartyHost: FirstPartyHost | LegacyFirstPartyHost\n): firstPartyHost is LegacyFirstPartyHost => {\n    return typeof firstPartyHost === 'string';\n};\n\n/**\n * Defaults legacy first party hosts format to Datadog first party hosts to keep\n * retro-compatibility before OTel support was introduced.\n */\nexport const formatFirstPartyHosts = (\n    firstPartyHosts: FirstPartyHostsConfiguration\n): FirstPartyHost[] => {\n    return firstPartyHosts.map(host => {\n        if (isLegacyFirstPartyHost(host)) {\n            return {\n                match: host,\n                propagatorTypes: [PropagatorType.DATADOG]\n            };\n        }\n        return host;\n    });\n};\n\nconst DEFAULTS = {\n    nativeCrashReportEnabled: false,\n    sessionSamplingRate: 100.0,\n    resourceTracingSamplingRate: 20.0,\n    site: 'US1',\n    longTaskThresholdMs: 0,\n    nativeLongTaskThresholdMs: 200,\n    nativeViewTracking: false,\n    nativeInteractionTracking: false,\n    getFirstPartyHosts: () => [],\n    getAdditionalConfig: () => ({}),\n    trackingConsent: TrackingConsent.GRANTED,\n    telemetrySampleRate: 20.0,\n    vitalsUpdateFrequency: VitalsUpdateFrequency.AVERAGE,\n    logEventMapper: null,\n    errorEventMapper: null,\n    resourceEventMapper: null,\n    actionEventMapper: null\n};\n\n/**\n * The SDK configuration class.\n * It will be used to configure the SDK functionality at initialization.\n */\nexport class DdSdkReactNativeConfiguration {\n    /**\n     * Enables crash reporting for native plaforms (iOS, Android). Default `false`.\n     */\n    public nativeCrashReportEnabled: boolean =\n        DEFAULTS.nativeCrashReportEnabled;\n    /**\n     * @deprecated `sampleRate` has been replaced by `sessionSamplingRate` to avoid confusion with `resourceTracingSamplingRate` and will be removed in a future release.\n     */\n    public sampleRate?: number;\n    /**\n     * Percentage of sampled RUM sessions. Range `0`-`100`.\n     */\n    public sessionSamplingRate: number = DEFAULTS.sessionSamplingRate;\n    /**\n     * Percentage of tracing integrations for network calls between your app and your backend. Range `0`-`100`.\n     */\n    public resourceTracingSamplingRate: number =\n        DEFAULTS.resourceTracingSamplingRate;\n    public site: string = DEFAULTS.site;\n    /**\n     * Verbosity for internal SDK logging.\n     * Set to `SdkVerbosity.DEBUG` to debug your SDK implementation.\n     */\n    public verbosity: SdkVerbosity | undefined = undefined;\n    /**\n     * Enables native views tracking.\n     * Set to `true` if you use a custom navigation system relying on native views.\n     */\n    public nativeViewTracking: boolean = DEFAULTS.nativeViewTracking;\n    /**\n     * Enables native interaction tracking.\n     * Set to `true` if you want to track interactions on native screens.\n     */\n    public nativeInteractionTracking: boolean =\n        DEFAULTS.nativeInteractionTracking;\n    public proxyConfig?: ProxyConfiguration = undefined;\n    public serviceName?: string = undefined;\n    /**\n     * List of your backends hosts to enable tracing with.\n     * Regular expressions are NOT supported.\n     *\n     * Matches domains and subdomains, e.g. `['example.com']` matches `example.com` and `api.example.com`.\n     */\n    public firstPartyHosts: FirstPartyHostsConfiguration = DEFAULTS.getFirstPartyHosts();\n    /**\n     * Overrides the reported version of the app.\n     * Accepted characters are alphanumerics and `_`, `-`, `:`, `.`, `/`.\n     * Other special characters are converted to underscores.\n     *\n     * See https://docs.datadoghq.com/getting_started/tagging/#define-tags for more information on the format.\n     *\n     * Make sure you set it correctly, as it will have to match the one specified during the upload of your source maps and other mapping files.\n     */\n    public version?: string;\n    /**\n     * Add a suffix to the reported version of the app.\n     * Accepted characters are alphanumerics and `_`, `-`, `:`, `.`, `/`.\n     * Other special characters are converted to underscores.\n     *\n     * See https://docs.datadoghq.com/getting_started/tagging/#define-tags for more information on the format.\n     *\n     * A dash (`-`) will be automatically added between the version and the suffix\n     */\n    public versionSuffix?: string;\n\n    /**\n     * The sampling rate for Internal Telemetry (info related to the work of the\n     * SDK internals).\n     *\n     * The sampling rate must be a value between 0 and 100. A value of 0 means no\n     * telemetry will be sent, 100 means all telemetry will be sent. When\n     * `telemetrySampleRate` is not set, the default value from the iOS and\n     * Android SDK is used, which is 20.\n     */\n    public telemetrySampleRate: number = DEFAULTS.telemetrySampleRate;\n\n    /**\n     * The threshold for native long tasks reporting in milliseconds.\n     *\n     * - Setting it to `0` or `false` disables native long task reporting.\n     * - Values below `100` will be raised to `100`.\n     * - Values above `5000` will be lowered to `5000`.\n     *\n     * Default value is `200`.\n     */\n    public nativeLongTaskThresholdMs: number | false =\n        DEFAULTS.nativeLongTaskThresholdMs;\n\n    /**\n     * The threshold for javascript long tasks reporting in milliseconds.\n     *\n     * - Setting it to `0` or `false` disables javascript long task reporting.\n     * - Values below `100` will be raised to `100`.\n     * - Values above `5000` will be lowered to `5000`.\n     *\n     * Default value is `0`\n     */\n    public longTaskThresholdMs: number | false = DEFAULTS.longTaskThresholdMs;\n\n    /**\n     * Sets the preferred frequency for collecting mobile vitals.\n     */\n    public vitalsUpdateFrequency: VitalsUpdateFrequency =\n        DEFAULTS.vitalsUpdateFrequency;\n\n    public logEventMapper: LogEventMapper | null = DEFAULTS.logEventMapper;\n\n    public errorEventMapper: ErrorEventMapper | null =\n        DEFAULTS.errorEventMapper;\n\n    public resourceEventMapper: ResourceEventMapper | null =\n        DEFAULTS.resourceEventMapper;\n\n    public actionEventMapper: ActionEventMapper | null =\n        DEFAULTS.actionEventMapper;\n\n    public additionalConfig: {\n        [k: string]: any;\n    } = DEFAULTS.getAdditionalConfig();\n\n    constructor(\n        readonly clientToken: string,\n        readonly env: string,\n        readonly applicationId: string,\n        readonly trackInteractions: boolean = false,\n        readonly trackResources: boolean = false,\n        readonly trackErrors: boolean = false,\n        readonly trackingConsent: TrackingConsent = DEFAULTS.trackingConsent\n    ) {}\n}\n\n/**\n * Auto Instrumentation configuration passed to DatadogProvider.\n * Does not include default values.\n */\nexport type AutoInstrumentationConfiguration = {\n    readonly trackInteractions: boolean;\n    readonly trackResources: boolean;\n    readonly firstPartyHosts?: FirstPartyHostsConfiguration;\n    readonly resourceTracingSamplingRate?: number;\n    readonly trackErrors: boolean;\n    readonly logEventMapper?: LogEventMapper | null;\n    readonly errorEventMapper?: ErrorEventMapper | null;\n    readonly resourceEventMapper?: ResourceEventMapper | null;\n    readonly actionEventMapper?: ActionEventMapper | null;\n};\n\n/**\n * Parameters needed to start auto instrumentation. Includes default values.\n */\nexport type AutoInstrumentationParameters = {\n    readonly trackInteractions: boolean;\n    readonly trackResources: boolean;\n    readonly firstPartyHosts: FirstPartyHostsConfiguration;\n    readonly resourceTracingSamplingRate: number;\n    readonly trackErrors: boolean;\n    readonly logEventMapper: LogEventMapper | null;\n    readonly errorEventMapper: ErrorEventMapper | null;\n    readonly resourceEventMapper: ResourceEventMapper | null;\n    readonly actionEventMapper: ActionEventMapper | null;\n};\n\n/**\n * We could use `Proxy` instead of this function, but `Proxy` is not available on\n * the older android jsc that can still be used.\n */\nexport const addDefaultValuesToAutoInstrumentationConfiguration = (\n    features: AutoInstrumentationConfiguration\n): AutoInstrumentationParameters => {\n    return {\n        ...features,\n        firstPartyHosts:\n            features.firstPartyHosts || DEFAULTS.getFirstPartyHosts(),\n        resourceTracingSamplingRate:\n            features.resourceTracingSamplingRate === undefined\n                ? DEFAULTS.resourceTracingSamplingRate\n                : features.resourceTracingSamplingRate,\n        logEventMapper:\n            features.logEventMapper === undefined\n                ? DEFAULTS.logEventMapper\n                : features.logEventMapper,\n        errorEventMapper:\n            features.errorEventMapper === undefined\n                ? DEFAULTS.errorEventMapper\n                : features.errorEventMapper,\n        resourceEventMapper:\n            features.resourceEventMapper === undefined\n                ? DEFAULTS.resourceEventMapper\n                : features.resourceEventMapper,\n        actionEventMapper:\n            features.actionEventMapper === undefined\n                ? DEFAULTS.actionEventMapper\n                : features.actionEventMapper\n    };\n};\n\nexport type PartialInitializationConfiguration = {\n    readonly clientToken: string;\n    readonly env: string;\n    readonly applicationId: string;\n    readonly sessionSamplingRate?: number;\n    readonly site?: string;\n    readonly verbosity?: SdkVerbosity | undefined;\n    readonly nativeViewTracking?: boolean;\n    readonly nativeInteractionTracking?: boolean;\n    readonly proxyConfig?: ProxyConfiguration;\n    readonly serviceName?: string;\n    readonly version?: string;\n    versionSuffix?: string;\n    readonly additionalConfig?: { [k: string]: any };\n    readonly trackingConsent?: TrackingConsent;\n    readonly longTaskThresholdMs?: number | false;\n    readonly nativeLongTaskThresholdMs?: number | false;\n    readonly nativeCrashReportEnabled?: boolean;\n    readonly telemetrySampleRate?: number;\n    readonly vitalsUpdateFrequency?: VitalsUpdateFrequency;\n};\n\nconst setConfigurationAttribute = <\n    AttributeName extends keyof DdSdkReactNativeConfiguration\n>(\n    attribute: {\n        value?: DdSdkReactNativeConfiguration[AttributeName];\n        name: AttributeName;\n    },\n    configuration: DdSdkReactNativeConfiguration\n) => {\n    if (attribute.value !== undefined) {\n        configuration[attribute.name] = attribute.value;\n    }\n};\n\nexport const buildConfigurationFromPartialConfiguration = (\n    features: AutoInstrumentationConfiguration,\n    configuration: PartialInitializationConfiguration\n): DdSdkReactNativeConfiguration => {\n    const {\n        clientToken,\n        env,\n        applicationId,\n        ...remainingConfiguration\n    } = configuration;\n    const SdkConfiguration = new DdSdkReactNativeConfiguration(\n        clientToken,\n        env,\n        applicationId,\n        features.trackInteractions,\n        features.trackResources,\n        features.trackErrors,\n        configuration.trackingConsent\n    );\n\n    (Object.keys(\n        remainingConfiguration\n    ) as (keyof typeof remainingConfiguration)[]).forEach(name => {\n        setConfigurationAttribute(\n            { value: remainingConfiguration[name], name },\n            SdkConfiguration\n        );\n    });\n\n    setConfigurationAttribute(\n        {\n            name: 'resourceTracingSamplingRate',\n            value: features.resourceTracingSamplingRate\n        },\n        SdkConfiguration\n    );\n    setConfigurationAttribute(\n        { name: 'firstPartyHosts', value: features.firstPartyHosts },\n        SdkConfiguration\n    );\n    setConfigurationAttribute(\n        {\n            name: 'logEventMapper',\n            value: features.logEventMapper\n        },\n        SdkConfiguration\n    );\n    setConfigurationAttribute(\n        {\n            name: 'errorEventMapper',\n            value: features.errorEventMapper\n        },\n        SdkConfiguration\n    );\n    setConfigurationAttribute(\n        {\n            name: 'resourceEventMapper',\n            value: features.resourceEventMapper\n        },\n        SdkConfiguration\n    );\n    setConfigurationAttribute(\n        {\n            name: 'actionEventMapper',\n            value: features.actionEventMapper\n        },\n        SdkConfiguration\n    );\n\n    return SdkConfiguration;\n};\n\nexport class DatadogProviderConfiguration extends DdSdkReactNativeConfiguration {\n    public initializationMode: InitializationMode = InitializationMode.SYNC;\n}\n\nexport enum InitializationMode {\n    SYNC = 'SYNC',\n    ASYNC = 'ASYNC'\n}\n\nexport type InitializationModeForTelemetry =\n    | 'LEGACY'\n    | 'SYNC'\n    | 'ASYNC'\n    | 'PARTIAL';\n"]}