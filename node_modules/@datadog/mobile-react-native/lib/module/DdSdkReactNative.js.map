{"version":3,"sources":["DdSdkReactNative.tsx"],"names":["InteractionManager","DdSdkReactNativeConfiguration","buildConfigurationFromPartialConfiguration","addDefaultValuesToAutoInstrumentationConfiguration","InitializationMode","formatFirstPartyHosts","InternalLog","ProxyType","SdkVerbosity","DdSdk","DdLogs","adaptLongTaskThreshold","DdRum","DdRumErrorTracking","DdRumUserInteractionTracking","DdRumResourceTracking","AttributesSingleton","BufferSingleton","UserInfoSingleton","DdSdkConfiguration","version","sdkVersion","DdSdkReactNative","initialize","configuration","initializeNativeSDK","initializationModeForTelemetry","enableFeatures","_initializeFromDatadogProvider","initializationMode","SYNC","ASYNC","runAfterInteractions","_enableFeaturesFromDatadogProvider","features","setAttributes","attributes","log","JSON","stringify","DEBUG","getInstance","setUser","user","setUserInfo","setTrackingConsent","consent","wasAutoInstrumented","WARN","trackInteractions","startTracking","trackResources","tracingSamplingRate","resourceTracingSamplingRate","firstPartyHosts","trackErrors","logEventMapper","registerLogEventMapper","errorEventMapper","registerErrorEventMapper","resourceEventMapper","registerResourceEventMapper","actionEventMapper","registerActionEventMapper","params","wasInitialized","__DEV__","telemetryDebug","Promise","resolve","verbosity","buildConfiguration","clientToken","env","applicationId","nativeCrashReportEnabled","nativeLongTaskThresholdMs","longTaskThresholdMs","sampleRate","undefined","sessionSamplingRate","site","trackingConsent","additionalConfig","telemetrySampleRate","vitalsUpdateFrequency","initializationType","trackNetworkRequests","INFO","onInitialization","DD_SOURCE_KEY","DD_SDK_VERSION","DD_NATIVE_VIEW_TRACKING_KEY","nativeViewTracking","DD_NATIVE_INTERACTION_TRACKING_KEY","nativeInteractionTracking","DD_SDK_VERBOSITY_KEY","proxyConfig","DD_PROXY_TYPE_KEY","type","DD_PROXY_ADDRESS_KEY","address","DD_PROXY_PORT_KEY","port","username","password","SOCKS","console","warn","DD_PROXY_USERNAME_KEY","DD_PROXY_PASSWORD_KEY","serviceName","DD_SERVICE_NAME","DD_VERSION","versionSuffix","DD_VERSION_SUFFIX"],"mappings":"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","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport { InteractionManager } from 'react-native';\n\nimport {\n    DdSdkReactNativeConfiguration,\n    buildConfigurationFromPartialConfiguration,\n    addDefaultValuesToAutoInstrumentationConfiguration,\n    InitializationMode,\n    formatFirstPartyHosts\n} from './DdSdkReactNativeConfiguration';\nimport type {\n    AutoInstrumentationParameters,\n    DatadogProviderConfiguration,\n    PartialInitializationConfiguration,\n    AutoInstrumentationConfiguration,\n    InitializationModeForTelemetry\n} from './DdSdkReactNativeConfiguration';\nimport { InternalLog } from './InternalLog';\nimport { ProxyType } from './ProxyConfiguration';\nimport { SdkVerbosity } from './SdkVerbosity';\nimport type { TrackingConsent } from './TrackingConsent';\nimport { DdSdk } from './foundation';\nimport { DdLogs } from './logs/DdLogs';\nimport { adaptLongTaskThreshold } from './longTasksUtils';\nimport { DdRum } from './rum/DdRum';\nimport { DdRumErrorTracking } from './rum/instrumentation/DdRumErrorTracking';\nimport { DdRumUserInteractionTracking } from './rum/instrumentation/interactionTracking/DdRumUserInteractionTracking';\nimport { DdRumResourceTracking } from './rum/instrumentation/resourceTracking/DdRumResourceTracking';\nimport { AttributesSingleton } from './sdk/AttributesSingleton/AttributesSingleton';\nimport type { Attributes } from './sdk/AttributesSingleton/types';\nimport { BufferSingleton } from './sdk/DatadogProvider/Buffer/BufferSingleton';\nimport { UserInfoSingleton } from './sdk/UserInfoSingleton/UserInfoSingleton';\nimport type { UserInfo } from './sdk/UserInfoSingleton/types';\nimport { DdSdkConfiguration } from './types';\nimport { version as sdkVersion } from './version';\n\n/**\n * This class initializes the Datadog SDK, and sets up communication with the server.\n */\nexport class DdSdkReactNative {\n    private static readonly DD_SOURCE_KEY = '_dd.source';\n    private static readonly DD_SDK_VERSION = '_dd.sdk_version';\n    private static readonly DD_SERVICE_NAME = '_dd.service_name';\n    private static readonly DD_SDK_VERBOSITY_KEY = '_dd.sdk_verbosity';\n    private static readonly DD_NATIVE_VIEW_TRACKING_KEY =\n        '_dd.native_view_tracking';\n    private static readonly DD_NATIVE_INTERACTION_TRACKING_KEY =\n        '_dd.native_interaction_tracking';\n    private static readonly DD_VERSION = '_dd.version';\n    private static readonly DD_VERSION_SUFFIX = '_dd.version_suffix';\n\n    // Proxy\n    private static readonly DD_PROXY_TYPE_KEY = '_dd.proxy.type';\n    private static readonly DD_PROXY_ADDRESS_KEY = '_dd.proxy.address';\n    private static readonly DD_PROXY_PORT_KEY = '_dd.proxy.port';\n    private static readonly DD_PROXY_USERNAME_KEY = '_dd.proxy.username';\n    private static readonly DD_PROXY_PASSWORD_KEY = '_dd.proxy.password';\n\n    private static wasInitialized = false;\n    private static wasAutoInstrumented = false;\n    private static features?: AutoInstrumentationConfiguration;\n\n    /**\n     * Initializes the Datadog SDK.\n     * @param configuration the configuration for the SDK library\n     * @returns a Promise.\n     */\n    static async initialize(\n        configuration: DdSdkReactNativeConfiguration\n    ): Promise<void> {\n        await DdSdkReactNative.initializeNativeSDK(configuration, {\n            initializationModeForTelemetry: 'LEGACY'\n        });\n        DdSdkReactNative.enableFeatures(configuration);\n    }\n\n    private static initializeNativeSDK = async (\n        configuration: DdSdkReactNativeConfiguration,\n        params: {\n            initializationModeForTelemetry: InitializationModeForTelemetry;\n        }\n    ): Promise<void> => {\n        if (DdSdkReactNative.wasInitialized) {\n            InternalLog.log(\n                \"Can't initialize Datadog, SDK was already initialized\",\n                SdkVerbosity.WARN\n            );\n            if (!__DEV__) {\n                DdSdk.telemetryDebug(\n                    'RN SDK was already initialized in javascript'\n                );\n            }\n            return new Promise(resolve => resolve());\n        }\n\n        InternalLog.verbosity = configuration.verbosity;\n\n        DdSdkReactNative.buildConfiguration(configuration);\n\n        await DdSdk.initialize(\n            new DdSdkConfiguration(\n                configuration.clientToken,\n                configuration.env,\n                configuration.applicationId,\n                configuration.nativeCrashReportEnabled,\n                adaptLongTaskThreshold(configuration.nativeLongTaskThresholdMs),\n                adaptLongTaskThreshold(configuration.longTaskThresholdMs),\n                configuration.sampleRate === undefined\n                    ? configuration.sessionSamplingRate\n                    : configuration.sampleRate,\n                configuration.site,\n                configuration.trackingConsent,\n                configuration.additionalConfig,\n                configuration.telemetrySampleRate,\n                configuration.vitalsUpdateFrequency,\n                {\n                    initializationType: params.initializationModeForTelemetry,\n                    trackErrors: configuration.trackErrors,\n                    trackInteractions: configuration.trackInteractions,\n                    trackNetworkRequests: configuration.trackResources\n                }\n            )\n        );\n        InternalLog.log('Datadog SDK was initialized', SdkVerbosity.INFO);\n        DdSdkReactNative.wasInitialized = true;\n        BufferSingleton.onInitialization();\n    };\n\n    /**\n     * FOR INTERNAL USE ONLY.\n     */\n    static async _initializeFromDatadogProvider(\n        configuration: DatadogProviderConfiguration\n    ): Promise<void> {\n        DdSdkReactNative.enableFeatures(configuration);\n        if (configuration.initializationMode === InitializationMode.SYNC) {\n            return DdSdkReactNative.initializeNativeSDK(configuration, {\n                initializationModeForTelemetry: 'SYNC'\n            });\n        }\n        if (configuration.initializationMode === InitializationMode.ASYNC) {\n            return InteractionManager.runAfterInteractions(() => {\n                return DdSdkReactNative.initializeNativeSDK(configuration, {\n                    initializationModeForTelemetry: 'ASYNC'\n                });\n            });\n        }\n        // TODO: Remove when DdSdkReactNativeConfiguration is deprecated\n        if (configuration instanceof DdSdkReactNativeConfiguration) {\n            return DdSdkReactNative.initializeNativeSDK(configuration, {\n                initializationModeForTelemetry: 'SYNC'\n            });\n        }\n    }\n\n    /**\n     * FOR INTERNAL USE ONLY.\n     */\n    static async _enableFeaturesFromDatadogProvider(\n        features: AutoInstrumentationConfiguration\n    ): Promise<void> {\n        DdSdkReactNative.features = features;\n        DdSdkReactNative.enableFeatures(\n            addDefaultValuesToAutoInstrumentationConfiguration(features)\n        );\n    }\n\n    /**\n     * FOR INTERNAL USE ONLY.\n     */\n    static _initializeFromDatadogProviderWithConfigurationAsync = async (\n        configuration: PartialInitializationConfiguration\n    ): Promise<void> => {\n        if (!DdSdkReactNative.features) {\n            InternalLog.log(\n                \"Can't initialize Datadog, make sure the DatadogProvider component is mounted before calling this function\",\n                SdkVerbosity.WARN\n            );\n            return new Promise(resolve => resolve());\n        }\n\n        return DdSdkReactNative.initializeNativeSDK(\n            buildConfigurationFromPartialConfiguration(\n                DdSdkReactNative.features,\n                configuration\n            ),\n            { initializationModeForTelemetry: 'PARTIAL' }\n        );\n    };\n\n    /**\n     * Adds a set of attributes to the global context attached with all future Logs, Spans and RUM events.\n     * To remove an attribute, set it to `undefined` in a call to `setAttributes`.\n     * @param attributes: The global context attributes.\n     * @returns a Promise.\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    static async setAttributes(attributes: Attributes): Promise<void> {\n        InternalLog.log(\n            `Setting attributes ${JSON.stringify(attributes)}`,\n            SdkVerbosity.DEBUG\n        );\n        await DdSdk.setAttributes(attributes);\n        AttributesSingleton.getInstance().setAttributes(attributes);\n    }\n\n    /**\n     * Set the user information.\n     * @param user: The user object (use builtin attributes: 'id', 'email', 'name', and/or any custom attribute).\n     * @returns a Promise.\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    static async setUser(user: UserInfo): Promise<void> {\n        InternalLog.log(\n            `Setting user ${JSON.stringify(user)}`,\n            SdkVerbosity.DEBUG\n        );\n        await DdSdk.setUser(user);\n        UserInfoSingleton.getInstance().setUserInfo(user);\n    }\n\n    /**\n     * Set the tracking consent regarding the data collection.\n     * @param trackingConsent: One of TrackingConsent values.\n     * @returns a Promise.\n     */\n    static setTrackingConsent(consent: TrackingConsent): Promise<void> {\n        InternalLog.log(`Setting consent ${consent}`, SdkVerbosity.DEBUG);\n        return DdSdk.setTrackingConsent(consent);\n    }\n\n    private static buildConfiguration = (\n        configuration: DdSdkReactNativeConfiguration\n    ) => {\n        configuration.additionalConfig[DdSdkReactNative.DD_SOURCE_KEY] =\n            'react-native';\n        configuration.additionalConfig[\n            DdSdkReactNative.DD_SDK_VERSION\n        ] = sdkVersion;\n        configuration.additionalConfig[\n            DdSdkReactNative.DD_NATIVE_VIEW_TRACKING_KEY\n        ] = configuration.nativeViewTracking;\n        configuration.additionalConfig[\n            DdSdkReactNative.DD_NATIVE_INTERACTION_TRACKING_KEY\n        ] = configuration.nativeInteractionTracking;\n\n        if (configuration.verbosity) {\n            configuration.additionalConfig[\n                DdSdkReactNative.DD_SDK_VERBOSITY_KEY\n            ] = configuration.verbosity;\n        }\n\n        if (configuration.proxyConfig) {\n            const additionalConfig = configuration.additionalConfig;\n            const proxyConfig = configuration.proxyConfig;\n\n            additionalConfig[DdSdkReactNative.DD_PROXY_TYPE_KEY] =\n                proxyConfig.type;\n            additionalConfig[DdSdkReactNative.DD_PROXY_ADDRESS_KEY] =\n                proxyConfig.address;\n            additionalConfig[DdSdkReactNative.DD_PROXY_PORT_KEY] =\n                proxyConfig.port;\n            if (proxyConfig.username && proxyConfig.password) {\n                if (proxyConfig.type === ProxyType.SOCKS) {\n                    console.warn(\n                        \"SOCKS proxy configuration doesn't support Basic authentication.\"\n                    );\n                } else {\n                    additionalConfig[DdSdkReactNative.DD_PROXY_USERNAME_KEY] =\n                        proxyConfig.username;\n                    additionalConfig[DdSdkReactNative.DD_PROXY_PASSWORD_KEY] =\n                        proxyConfig.password;\n                }\n            }\n        }\n\n        if (configuration.serviceName) {\n            configuration.additionalConfig[DdSdkReactNative.DD_SERVICE_NAME] =\n                configuration.serviceName;\n        }\n\n        if (configuration.version) {\n            configuration.additionalConfig[DdSdkReactNative.DD_VERSION] = `${\n                configuration.version\n            }${\n                configuration.versionSuffix\n                    ? `-${configuration.versionSuffix}`\n                    : ''\n            }`;\n        }\n\n        // If both version and version suffix are provided, we merge them into the version field.\n        // To avoid adding it in again the native part, we only set it if the version isn't set.\n        if (configuration.versionSuffix && !configuration.version) {\n            configuration.additionalConfig[\n                DdSdkReactNative.DD_VERSION_SUFFIX\n            ] = `-${configuration.versionSuffix}`;\n        }\n\n        configuration.additionalConfig[\n            '_dd.first_party_hosts'\n        ] = formatFirstPartyHosts(configuration.firstPartyHosts);\n    };\n\n    private static enableFeatures(\n        configuration: AutoInstrumentationParameters\n    ) {\n        if (DdSdkReactNative.wasAutoInstrumented) {\n            InternalLog.log(\n                \"Can't auto instrument Datadog, SDK was already instrumented\",\n                SdkVerbosity.WARN\n            );\n            return;\n        }\n        if (configuration.trackInteractions) {\n            DdRumUserInteractionTracking.startTracking();\n        }\n\n        if (configuration.trackResources) {\n            DdRumResourceTracking.startTracking({\n                tracingSamplingRate: configuration.resourceTracingSamplingRate,\n                firstPartyHosts: formatFirstPartyHosts(\n                    configuration.firstPartyHosts\n                )\n            });\n        }\n\n        if (configuration.trackErrors) {\n            DdRumErrorTracking.startTracking();\n        }\n\n        if (configuration.logEventMapper) {\n            DdLogs.registerLogEventMapper(configuration.logEventMapper);\n        }\n\n        if (configuration.errorEventMapper) {\n            DdRum.registerErrorEventMapper(configuration.errorEventMapper);\n        }\n\n        if (configuration.resourceEventMapper) {\n            DdRum.registerResourceEventMapper(\n                configuration.resourceEventMapper\n            );\n        }\n\n        if (configuration.actionEventMapper) {\n            DdRum.registerActionEventMapper(configuration.actionEventMapper);\n        }\n\n        DdSdkReactNative.wasAutoInstrumented = true;\n    }\n}\n"]}