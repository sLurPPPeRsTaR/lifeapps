{"version":3,"sources":["DatadogProvider.tsx"],"names":["React","DatadogProviderConfiguration","DdSdkReactNativeConfiguration","DdSdkReactNative","InternalLog","SdkVerbosity","isInitialized","isConfigurationPartial","configuration","console","warn","initializeDatadog","onInitialization","_initializeFromDatadogProvider","error","log","WARN","DatadogProvider","children","_enableFeaturesFromDatadogProvider","initialize","_initializeFromDatadogProviderWithConfigurationAsync","__internalResetIsInitializedForTesting"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SACIC,4BADJ,EAEIC,6BAFJ,QAGO,qCAHP;AAQA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA,IAAIC,aAAa,GAAG,KAApB;;AAwBA,MAAMC,sBAAsB,GACxBC,aAD2B,IAIyB;AACpD,MAAIA,aAAa,YAAYP,4BAA7B,EAA2D;AACvD,WAAO,KAAP;AACH;;AACD,MAAIO,aAAa,YAAYN,6BAA7B,EAA4D;AACxD;AACAO,IAAAA,OAAO,CAACC,IAAR,CACI,iHADJ;AAGA,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH,CAhBD;;AAkBA,MAAMC,iBAAiB,GAAG,OACtBH,aADsB,EAEtBI,gBAFsB,KAGrB;AACD,QAAMT,gBAAgB,CAACU,8BAAjB,CAAgDL,aAAhD,CAAN;;AACA,MAAII,gBAAJ,EAAsB;AAClB,QAAI;AACAA,MAAAA,gBAAgB;AACnB,KAFD,CAEE,OAAOE,KAAP,EAAc;AACZV,MAAAA,WAAW,CAACW,GAAZ,CACK,2CAA0CD,KAAM,EADrD,EAEIT,YAAY,CAACW,IAFjB;AAIH;AACJ;AACJ,CAfD;AAiBA;AACA;AACA;;;AACA,OAAO,MAAMC,eAAmD,GAAG,CAAC;AAChEC,EAAAA,QADgE;AAEhEV,EAAAA,aAFgE;AAGhEI,EAAAA;AAHgE,CAAD,KAI7D;AACF,MAAI,CAACN,aAAL,EAAoB;AAChB;AACA;AACA;AACA;AACA,QAAIC,sBAAsB,CAACC,aAAD,CAA1B,EAA2C;AACvCL,MAAAA,gBAAgB,CAACgB,kCAAjB,CAAoDX,aAApD;;AACAS,MAAAA,eAAe,CAACL,gBAAhB,GAAmCA,gBAAnC;AACH,KAHD,MAGO;AACHD,MAAAA,iBAAiB,CAACH,aAAD,EAAgBI,gBAAhB,CAAjB;AACH;;AACDN,IAAAA,aAAa,GAAG,IAAhB;AACH;;AAED,sBAAO,0CAAGY,QAAH,CAAP;AACH,CApBM;AAsBP;AACA;AACA;AACA;;AACAD,eAAe,CAACG,UAAhB,GAA6B,MACzBZ,aADyB,IAExB;AACD,QAAML,gBAAgB,CAACkB,oDAAjB,CACFb,aADE,CAAN;;AAGA,MAAIS,eAAe,CAACL,gBAApB,EAAsC;AAClCK,IAAAA,eAAe,CAACL,gBAAhB;AACH;AACJ,CATD;;AAWA,OAAO,MAAMU,sCAAsC,GAAG,MAAM;AACxDhB,EAAAA,aAAa,GAAG,KAAhB;AACH,CAFM","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\nimport React from 'react';\nimport type { PropsWithChildren } from 'react';\n\nimport {\n    DatadogProviderConfiguration,\n    DdSdkReactNativeConfiguration\n} from '../../DdSdkReactNativeConfiguration';\nimport type {\n    PartialInitializationConfiguration,\n    AutoInstrumentationConfiguration\n} from '../../DdSdkReactNativeConfiguration';\nimport { DdSdkReactNative } from '../../DdSdkReactNative';\nimport { InternalLog } from '../../InternalLog';\nimport { SdkVerbosity } from '../../SdkVerbosity';\n\nlet isInitialized = false;\n\ntype Props = PropsWithChildren<{\n    /**\n     * If a `DatadogProviderConfiguration` instance is passed, the SDK will start tracking errors, resources and actions and sending events.\n     *\n     * If a `AutoInstrumentationConfiguration` object is passed, the SDK will start tracking errors, resources and actions. To start sending events, call `DatadogProvider.initialize`.\n     */\n    configuration:\n        | DatadogProviderConfiguration\n        | AutoInstrumentationConfiguration;\n    /**\n     * Callback to be run once the SDK starts sending events.\n     */\n    onInitialization?: () => void;\n}>;\n\ntype StaticProperties = {\n    initialize: (\n        configuration: PartialInitializationConfiguration\n    ) => Promise<void>;\n    onInitialization?: () => void;\n};\n\nconst isConfigurationPartial = (\n    configuration:\n        | DatadogProviderConfiguration\n        | AutoInstrumentationConfiguration\n): configuration is AutoInstrumentationConfiguration => {\n    if (configuration instanceof DatadogProviderConfiguration) {\n        return false;\n    }\n    if (configuration instanceof DdSdkReactNativeConfiguration) {\n        // Not using InternalLog here as it is not yet instanciated\n        console.warn(\n            'A DdSdkReactNativeConfiguration was passed to DatadogProvider. Please use DatadogProviderConfiguration instead.'\n        );\n        return false;\n    }\n    return true;\n};\n\nconst initializeDatadog = async (\n    configuration: DatadogProviderConfiguration,\n    onInitialization?: () => void\n) => {\n    await DdSdkReactNative._initializeFromDatadogProvider(configuration);\n    if (onInitialization) {\n        try {\n            onInitialization();\n        } catch (error) {\n            InternalLog.log(\n                `Error running onInitialization callback ${error}`,\n                SdkVerbosity.WARN\n            );\n        }\n    }\n};\n\n/**\n * Set up the Datadog React Native SDK.\n */\nexport const DatadogProvider: React.FC<Props> & StaticProperties = ({\n    children,\n    configuration,\n    onInitialization\n}) => {\n    if (!isInitialized) {\n        // Here we cannot use a useEffect hook since it would be called after\n        // the first render. Thus, we wouldn't enable auto-instrumentation on\n        // the elements rendered in this first render and what happens during\n        // the first render.\n        if (isConfigurationPartial(configuration)) {\n            DdSdkReactNative._enableFeaturesFromDatadogProvider(configuration);\n            DatadogProvider.onInitialization = onInitialization;\n        } else {\n            initializeDatadog(configuration, onInitialization);\n        }\n        isInitialized = true;\n    }\n\n    return <>{children}</>;\n};\n\n/**\n * Initialize the Datadog SDK to start sending RUM events, logs and traces,\n * then execute onInitialization callback if any was provided.\n */\nDatadogProvider.initialize = async (\n    configuration: PartialInitializationConfiguration\n) => {\n    await DdSdkReactNative._initializeFromDatadogProviderWithConfigurationAsync(\n        configuration\n    );\n    if (DatadogProvider.onInitialization) {\n        DatadogProvider.onInitialization();\n    }\n};\n\nexport const __internalResetIsInitializedForTesting = () => {\n    isInitialized = false;\n};\n"]}