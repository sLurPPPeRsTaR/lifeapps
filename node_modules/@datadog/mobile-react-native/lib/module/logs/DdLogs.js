function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2016-Present Datadog, Inc.
 */
import { NativeModules } from 'react-native';
import { InternalLog } from '../InternalLog';
import { SdkVerbosity } from '../SdkVerbosity';
import { generateEventMapper } from './eventMapper';

const generateEmptyPromise = () => new Promise(resolve => resolve());

class DdLogsWrapper {
  constructor() {
    _defineProperty(this, "nativeLogs", NativeModules.DdLogs);

    _defineProperty(this, "logEventMapper", generateEventMapper(undefined));

    _defineProperty(this, "log", (message, context, status) => {
      InternalLog.log(`Tracking ${status} log “${message}”`, SdkVerbosity.DEBUG);
      const event = this.logEventMapper.applyEventMapper({
        message,
        context,
        status
      });

      if (!event) {
        return generateEmptyPromise();
      }

      return this.nativeLogs[status](event.message, event.context);
    });
  }

  debug(message, context = {}) {
    return this.log(message, context, 'debug');
  }

  info(message, context = {}) {
    return this.log(message, context, 'info');
  }

  warn(message, context = {}) {
    return this.log(message, context, 'warn');
  }

  error(message, context = {}) {
    return this.log(message, context, 'error');
  }

  registerLogEventMapper(logEventMapper) {
    this.logEventMapper = generateEventMapper(logEventMapper);
  }

  unregisterLogEventMapper() {
    this.logEventMapper = generateEventMapper(undefined);
  }

}

export const DdLogs = new DdLogsWrapper();
//# sourceMappingURL=DdLogs.js.map