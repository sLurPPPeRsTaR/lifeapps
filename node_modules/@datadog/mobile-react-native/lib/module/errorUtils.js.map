{"version":3,"sources":["errorUtils.ts"],"names":["EMPTY_MESSAGE","EMPTY_STACK_TRACE","getErrorMessage","error","message","undefined","String","getErrorStackTrace","stack","stacktrace","componentStack","sourceURL","line","column","e"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,iBAAiB,GAAG,EAA1B;AAEP,OAAO,MAAMC,eAAe,GAAIC,KAAD,IAAoC;AAC/D,MAAIC,OAAO,GAAGJ,aAAd;;AACA,MAAIG,KAAK,KAAKE,SAAV,IAAuBF,KAAK,KAAK,IAArC,EAA2C;AACvCC,IAAAA,OAAO,GAAGJ,aAAV;AACH,GAFD,MAEO,IAAI,OAAOG,KAAP,KAAiB,QAAjB,IAA6B,aAAaA,KAA9C,EAAqD;AACxDC,IAAAA,OAAO,GAAGE,MAAM,CAACH,KAAK,CAACC,OAAP,CAAhB;AACH,GAFM,MAEA;AACHA,IAAAA,OAAO,GAAGE,MAAM,CAACH,KAAD,CAAhB;AACH;;AAED,SAAOC,OAAP;AACH,CAXM;AAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,kBAAkB,GAAIJ,KAAD,IAAoC;AAClE,MAAIK,KAAK,GAAGP,iBAAZ;;AAEA,MAAI;AACA,QAAIE,KAAK,KAAKE,SAAV,IAAuBF,KAAK,KAAK,IAArC,EAA2C;AACvCK,MAAAA,KAAK,GAAGP,iBAAR;AACH,KAFD,MAEO,IAAI,OAAOE,KAAP,KAAiB,QAArB,EAA+B;AAClCK,MAAAA,KAAK,GAAGP,iBAAR;AACH,KAFM,MAEA,IAAI,OAAOE,KAAP,KAAiB,QAArB,EAA+B;AAClC,UAAI,gBAAgBA,KAApB,EAA2B;AACvBK,QAAAA,KAAK,GAAGF,MAAM,CAACH,KAAK,CAACM,UAAP,CAAd;AACH,OAFD,MAEO,IAAI,WAAWN,KAAf,EAAsB;AACzBK,QAAAA,KAAK,GAAGF,MAAM,CAACH,KAAK,CAACK,KAAP,CAAd;AACH,OAFM,MAEA,IAAI,oBAAoBL,KAAxB,EAA+B;AAClCK,QAAAA,KAAK,GAAGF,MAAM,CAACH,KAAK,CAACO,cAAP,CAAd;AACH,OAFM,MAEA,IACH,eAAeP,KAAf,IACA,UAAUA,KADV,IAEA,YAAYA,KAHT,EAIL;AACEK,QAAAA,KAAK,GAAI,MAAKL,KAAK,CAACQ,SAAU,IAAGR,KAAK,CAACS,IAAK,IAAGT,KAAK,CAACU,MAAO,EAA5D;AACH;AACJ;AACJ,GApBD,CAoBE,OAAOC,CAAP,EAAU,CACR;AACH;;AACD,SAAON,KAAP;AACH,CA3BM","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nexport const EMPTY_MESSAGE = 'Unknown Error';\nexport const EMPTY_STACK_TRACE = '';\n\nexport const getErrorMessage = (error: any | undefined): string => {\n    let message = EMPTY_MESSAGE;\n    if (error === undefined || error === null) {\n        message = EMPTY_MESSAGE;\n    } else if (typeof error === 'object' && 'message' in error) {\n        message = String(error.message);\n    } else {\n        message = String(error);\n    }\n\n    return message;\n};\n\n/**\n * Will extract the stack from the error, taking the first key found among:\n * `stacktrace`, `stack`, `componentStack` (component tree for component errors,\n * which contains only native components names in production).\n *\n * In last resort and if `sourceURL`, `line` and `column` are present, it will\n * generate a stack from this information.\n */\nexport const getErrorStackTrace = (error: any | undefined): string => {\n    let stack = EMPTY_STACK_TRACE;\n\n    try {\n        if (error === undefined || error === null) {\n            stack = EMPTY_STACK_TRACE;\n        } else if (typeof error === 'string') {\n            stack = EMPTY_STACK_TRACE;\n        } else if (typeof error === 'object') {\n            if ('stacktrace' in error) {\n                stack = String(error.stacktrace);\n            } else if ('stack' in error) {\n                stack = String(error.stack);\n            } else if ('componentStack' in error) {\n                stack = String(error.componentStack);\n            } else if (\n                'sourceURL' in error &&\n                'line' in error &&\n                'column' in error\n            ) {\n                stack = `at ${error.sourceURL}:${error.line}:${error.column}`;\n            }\n        }\n    } catch (e) {\n        // Do nothing\n    }\n    return stack;\n};\n"]}