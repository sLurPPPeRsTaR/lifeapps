{"version":3,"sources":["DdRumReactNavigationTracking.tsx"],"names":["DdRum","SdkVerbosity","InternalLog","AppState","BackHandler","DdRumReactNavigationTracking","startTrackingViews","navigationRef","viewNamePredicate","_route","trackedName","log","NULL_NAVIGATION_REF_ERROR_MESSAGE","ERROR","registeredContainer","NAVIGATION_REF_IN_USE_ERROR_MESSAGE","listener","resolveNavigationStateChangeListener","handleRouteNavigation","getCurrentRoute","addListener","backHandler","addEventListener","onBackPress","appStateSubscription","appStateListener","stopTrackingViews","removeListener","navigationStateChangeListener","remove","removeEventListener","route","appStateStatus","undefined","ROUTE_UNDEFINED_NAVIGATION_WARNING_MESSAGE","WARN","key","predicate","screenName","name","stopView","startView","canGoBack","isAppExitingOnBackPress","currentRoute"],"mappings":"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","sourcesContent":["/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\nimport { DdRum, SdkVerbosity, InternalLog } from '@datadog/mobile-react-native';\nimport type { AppStateStatus, NativeEventSubscription } from 'react-native';\nimport { AppState, BackHandler } from 'react-native';\n\nimport type {\n    NavigationContainerRef,\n    Route,\n    NavigationListener\n} from './react-navigation';\n\n// AppStateStatus can have values:\n//     'active' - The app is running in the foreground\n//     'background' - The app is running in the background. The user is either in another app or on the home screen\n//     'inactive' [iOS] - This is a transition state that currently never happens for typical React Native apps.\n//     'unknown' [iOS] - Initial value until the current app state is determined\n//     'extension' [iOS] - The app is running as an app extension\ndeclare type AppStateListener = (appStateStatus: AppStateStatus) => void | null;\n\nexport type ViewNamePredicate = (\n    route: Route<string, any | undefined>,\n    trackedName: string\n) => string | null;\n\n/**\n * Provides RUM integration for the [ReactNavigation](https://reactnavigation.org/) API.\n */\nexport class DdRumReactNavigationTracking {\n    private static registeredContainer: NavigationContainerRef | null;\n\n    private static navigationStateChangeListener: NavigationListener;\n\n    private static viewNamePredicate: ViewNamePredicate;\n\n    private static backHandler: NativeEventSubscription | null;\n\n    private static appStateSubscription?: NativeEventSubscription;\n\n    static ROUTE_UNDEFINED_NAVIGATION_WARNING_MESSAGE =\n        'A navigation change was detected but the RUM ViewEvent was dropped as the route was undefined.';\n    static NULL_NAVIGATION_REF_ERROR_MESSAGE =\n        'Cannot track views with a null navigationRef.';\n    static NAVIGATION_REF_IN_USE_ERROR_MESSAGE =\n        'Cannot track new navigation container while another one is still tracked. Please call `DdRumReactNavigationTracking.stopTrackingViews` on the previous container reference.';\n\n    static isAppExitingOnBackPress = (): boolean => {\n        if (DdRumReactNavigationTracking.registeredContainer === null) {\n            return false;\n        }\n        if (DdRumReactNavigationTracking.registeredContainer.canGoBack()) {\n            return false;\n        }\n        return true;\n    };\n\n    static onBackPress = () => {\n        if (DdRumReactNavigationTracking.isAppExitingOnBackPress()) {\n            DdRumReactNavigationTracking.stopTrackingViews(\n                DdRumReactNavigationTracking.registeredContainer\n            );\n        }\n        // We always return false so we make sure the react-navigation callback is called.\n        // See https://reactnative.dev/docs/backhandler\n        return false;\n    };\n\n    /**\n     * Starts tracking the NavigationContainer and sends a RUM View event every time the navigation route changed.\n     * @param navigationRef the reference to the real NavigationContainer.\n     */\n    static startTrackingViews(\n        navigationRef: NavigationContainerRef | null,\n        viewNamePredicate: ViewNamePredicate = function (\n            _route: Route<string, any | undefined>,\n            trackedName: string\n        ) {\n            return trackedName;\n        }\n    ): void {\n        if (navigationRef == null) {\n            InternalLog.log(\n                DdRumReactNavigationTracking.NULL_NAVIGATION_REF_ERROR_MESSAGE,\n                SdkVerbosity.ERROR\n            );\n            return;\n        }\n\n        if (\n            DdRumReactNavigationTracking.registeredContainer != null &&\n            this.registeredContainer !== navigationRef\n        ) {\n            InternalLog.log(\n                DdRumReactNavigationTracking.NAVIGATION_REF_IN_USE_ERROR_MESSAGE,\n                SdkVerbosity.ERROR\n            );\n        } else if (DdRumReactNavigationTracking.registeredContainer == null) {\n            DdRumReactNavigationTracking.viewNamePredicate = viewNamePredicate;\n            const listener = DdRumReactNavigationTracking.resolveNavigationStateChangeListener();\n            DdRumReactNavigationTracking.handleRouteNavigation(\n                navigationRef.getCurrentRoute()\n            );\n            navigationRef.addListener('state', listener);\n            DdRumReactNavigationTracking.registeredContainer = navigationRef;\n            DdRumReactNavigationTracking.backHandler = BackHandler.addEventListener(\n                'hardwareBackPress',\n                DdRumReactNavigationTracking.onBackPress\n            );\n            this.appStateSubscription = AppState.addEventListener(\n                'change',\n                DdRumReactNavigationTracking.appStateListener\n            );\n        }\n    }\n\n    /**\n     * Stops tracking the NavigationContainer.\n     * @param navigationRef the reference to the real NavigationContainer.\n     */\n    static stopTrackingViews(\n        navigationRef: NavigationContainerRef | null\n    ): void {\n        if (navigationRef != null) {\n            navigationRef.removeListener(\n                'state',\n                DdRumReactNavigationTracking.navigationStateChangeListener\n            );\n            DdRumReactNavigationTracking.backHandler?.remove();\n            DdRumReactNavigationTracking.backHandler = null;\n            DdRumReactNavigationTracking.registeredContainer = null;\n            DdRumReactNavigationTracking.viewNamePredicate = function (\n                _route: Route<string, any | undefined>,\n                trackedName: string\n            ) {\n                return trackedName;\n            };\n        }\n\n        // For versions of React Native below 0.65, addEventListener does not return a subscription.\n        // We have to call AppState.removeEventListener instead.\n        if (this.appStateSubscription) {\n            this.appStateSubscription.remove();\n        } else {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            AppState.removeEventListener(\n                'change',\n                DdRumReactNavigationTracking.appStateListener\n            );\n        }\n    }\n\n    private static handleRouteNavigation(\n        route: Route<string, any | undefined> | undefined,\n        appStateStatus: AppStateStatus | undefined = undefined\n    ) {\n        if (route === undefined || route === null) {\n            InternalLog.log(\n                DdRumReactNavigationTracking.ROUTE_UNDEFINED_NAVIGATION_WARNING_MESSAGE,\n                SdkVerbosity.WARN\n            );\n            // RUMM-1400 in some cases the route seem to be undefined\n            return;\n        }\n        const key = route.key;\n\n        const predicate = DdRumReactNavigationTracking.viewNamePredicate;\n        const screenName = predicate(route, route.name);\n\n        if (key != null && screenName != null) {\n            if (appStateStatus === 'background') {\n                DdRum.stopView(key);\n            } else if (\n                appStateStatus === 'active' ||\n                appStateStatus === undefined\n            ) {\n                // case when app goes into foreground,\n                // in that case navigation listener won't be called\n                DdRum.startView(key, screenName);\n            }\n        }\n    }\n\n    private static resolveNavigationStateChangeListener(): NavigationListener {\n        if (\n            DdRumReactNavigationTracking.navigationStateChangeListener == null\n        ) {\n            DdRumReactNavigationTracking.navigationStateChangeListener = () => {\n                const route = DdRumReactNavigationTracking.registeredContainer?.getCurrentRoute();\n\n                if (route === undefined) {\n                    InternalLog.log(\n                        DdRumReactNavigationTracking.ROUTE_UNDEFINED_NAVIGATION_WARNING_MESSAGE,\n                        SdkVerbosity.WARN\n                    );\n                    return;\n                }\n\n                DdRumReactNavigationTracking.handleRouteNavigation(route);\n            };\n        }\n        return DdRumReactNavigationTracking.navigationStateChangeListener;\n    }\n\n    private static appStateListener: AppStateListener = (\n        appStateStatus: AppStateStatus\n    ) => {\n        const currentRoute = DdRumReactNavigationTracking.registeredContainer?.getCurrentRoute();\n        if (currentRoute === undefined || currentRoute === null) {\n            InternalLog.log(\n                `We could not determine the route when changing the application state to: ${appStateStatus}. No RUM View event will be sent in this case.`,\n                SdkVerbosity.ERROR\n            );\n            return;\n        }\n\n        DdRumReactNavigationTracking.handleRouteNavigation(\n            currentRoute,\n            appStateStatus\n        );\n    };\n}\n"]}