{"version":3,"file":"text.js","names":["queryAllByText","instance","queryAllByTextFn","text","options","baseInstance","isHostElementForType","Text","getCompositeParentOfType","results","findAll","node","matchTextContent","matchDeepestOnly","getMultipleError","String","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","makeQueries","bindByTextQueries","getByText","getAllByText","queryByText","findByText","findAllByText"],"sources":["../../src/queries/text.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { Text } from 'react-native';\nimport {\n  isHostElementForType,\n  getCompositeParentOfType,\n} from '../helpers/component-tree';\nimport { findAll } from '../helpers/findAll';\nimport { matchTextContent } from '../helpers/matchers/matchTextContent';\nimport { TextMatch, TextMatchOptions } from '../matches';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\nimport { CommonQueryOptions } from './options';\n\ntype ByTextOptions = CommonQueryOptions & TextMatchOptions;\n\nconst queryAllByText = (\n  instance: ReactTestInstance\n): ((text: TextMatch, options?: ByTextOptions) => Array<ReactTestInstance>) =>\n  function queryAllByTextFn(text, options) {\n    const baseInstance = isHostElementForType(instance, Text)\n      ? getCompositeParentOfType(instance, Text)\n      : instance;\n\n    if (!baseInstance) {\n      return [];\n    }\n\n    const results = findAll(\n      baseInstance,\n      (node) => matchTextContent(node, text, options),\n      { ...options, matchDeepestOnly: true }\n    );\n\n    return results;\n  };\n\nconst getMultipleError = (text: TextMatch) =>\n  `Found multiple elements with text: ${String(text)}`;\n\nconst getMissingError = (text: TextMatch) =>\n  `Unable to find an element with text: ${String(text)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByText,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByTextQueries = {\n  getByText: GetByQuery<TextMatch, ByTextOptions>;\n  getAllByText: GetAllByQuery<TextMatch, ByTextOptions>;\n  queryByText: QueryByQuery<TextMatch, ByTextOptions>;\n  queryAllByText: QueryAllByQuery<TextMatch, ByTextOptions>;\n  findByText: FindByQuery<TextMatch, ByTextOptions>;\n  findAllByText: FindAllByQuery<TextMatch, ByTextOptions>;\n};\n\nexport const bindByTextQueries = (\n  instance: ReactTestInstance\n): ByTextQueries => ({\n  getByText: getBy(instance),\n  getAllByText: getAllBy(instance),\n  queryByText: queryBy(instance),\n  queryAllByText: queryAllBy(instance),\n  findByText: findBy(instance),\n  findAllByText: findAllBy(instance),\n});\n"],"mappings":";;;;;;AACA;AACA;AAIA;AACA;AAEA;AAaA,MAAMA,cAAc,GAClBC,QAA2B,IAE3B,SAASC,gBAAgB,CAACC,IAAI,EAAEC,OAAO,EAAE;EACvC,MAAMC,YAAY,GAAG,IAAAC,mCAAoB,EAACL,QAAQ,EAAEM,iBAAI,CAAC,GACrD,IAAAC,uCAAwB,EAACP,QAAQ,EAAEM,iBAAI,CAAC,GACxCN,QAAQ;EAEZ,IAAI,CAACI,YAAY,EAAE;IACjB,OAAO,EAAE;EACX;EAEA,MAAMI,OAAO,GAAG,IAAAC,gBAAO,EACrBL,YAAY,EACXM,IAAI,IAAK,IAAAC,kCAAgB,EAACD,IAAI,EAAER,IAAI,EAAEC,OAAO,CAAC,EAC/C;IAAE,GAAGA,OAAO;IAAES,gBAAgB,EAAE;EAAK,CAAC,CACvC;EAED,OAAOJ,OAAO;AAChB,CAAC;AAEH,MAAMK,gBAAgB,GAAIX,IAAe,IACtC,sCAAqCY,MAAM,CAACZ,IAAI,CAAE,EAAC;AAEtD,MAAMa,eAAe,GAAIb,IAAe,IACrC,wCAAuCY,MAAM,CAACZ,IAAI,CAAE,EAAC;AAExD,MAAM;EAAEc,KAAK;EAAEC,QAAQ;EAAEC,OAAO;EAAEC,UAAU;EAAEC,MAAM;EAAEC;AAAU,CAAC,GAAG,IAAAC,wBAAW,EAC7EvB,cAAc,EACdgB,eAAe,EACfF,gBAAgB,CACjB;AAWM,MAAMU,iBAAiB,GAC5BvB,QAA2B,KACR;EACnBwB,SAAS,EAAER,KAAK,CAAChB,QAAQ,CAAC;EAC1ByB,YAAY,EAAER,QAAQ,CAACjB,QAAQ,CAAC;EAChC0B,WAAW,EAAER,OAAO,CAAClB,QAAQ,CAAC;EAC9BD,cAAc,EAAEoB,UAAU,CAACnB,QAAQ,CAAC;EACpC2B,UAAU,EAAEP,MAAM,CAACpB,QAAQ,CAAC;EAC5B4B,aAAa,EAAEP,SAAS,CAACrB,QAAQ;AACnC,CAAC,CAAC;AAAC"}